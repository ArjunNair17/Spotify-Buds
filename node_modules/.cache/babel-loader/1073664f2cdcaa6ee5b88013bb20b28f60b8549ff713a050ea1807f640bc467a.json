{"ast":null,"code":"var _jsxFileName = \"/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/src/SpotifyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, get, onValue } from \"firebase/database\";\nimport { app } from './Firebase/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\nconst redirectURL = \"http://localhost:3000/main\";\nconst MainComponent = () => {\n  _s();\n  const [name, setName] = useState(\"No Currently Playing\");\n  const [currentAccessToken, setToken] = useState(\"\");\n  const [uid, setUid] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  useEffect(() => {\n    const auth = getAuth();\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/auth.user\n        const uid = user.uid;\n        const currentEmail = user.email;\n        console.log(\"Got here!\");\n        setEmail(currentEmail);\n        setUid(uid);\n        // ...\n      } else {\n        console.log(\"signed out\");\n        // User is signed out\n        // ...\n      }\n    });\n\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n    const handleAuthentication = async () => {\n      if (!code) {\n        redirectToAuthCodeFlow(clientID);\n      } else {\n        console.log(\"got here!\");\n        await getAccessToken(clientID, code);\n        const profile = await fetchProfile(currentAccessToken);\n        //setToken(current);\n        if (profile.is_playing === true) {\n          setName(profile.item.name);\n        } else {\n          setName(\"Nothing is currently playing.\");\n        }\n      }\n    };\n    handleAuthentication();\n  }, []);\n  function writeData(currentPlayingSong) {\n    const db = getDatabase();\n    set(ref(db, \"users/\" + uid), {\n      userName: email,\n      currentSong: currentPlayingSong\n    });\n  }\n  const getUsers = async () => {\n    const db = getDatabase();\n    try {\n      const usersRef = ref(db, 'users');\n      const dataSnapshot = await get(usersRef);\n      if (dataSnapshot.exists()) {\n        const users = dataSnapshot.val();\n        console.log(users);\n        for (const userId in users) {\n          const user = users[userId];\n          console.log(user.currentSong);\n        }\n      } else {\n        console.log('No users found');\n      }\n    } catch (error) {\n      console.log('Error getting users:', error);\n    }\n  };\n  const params = new URLSearchParams(window.location.search);\n  const code = params.get('code');\n  const refresh = async () => {\n    const accessToken = await getAccessToken(clientID, code);\n    const profile = await fetchProfile(currentAccessToken);\n    if (profile.is_playing === true) {\n      setName(profile.item.name);\n      writeData(profile.item.name);\n      getUsers();\n    } else {\n      setName(\"Nothing is currently playing.\");\n    }\n  };\n  async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n    localStorage.setItem(\"verifier\", verifier);\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", redirectURL);\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  }\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  async function generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\n    params.append(\"code_verifier\", verifier);\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: params\n    });\n    console.log(result.json);\n    const {\n      access_token\n    } = await result.json();\n    if (access_token !== undefined) {\n      setToken(access_token);\n      localStorage.setItem(\"accessToken\", access_token);\n    }\n    return access_token;\n  }\n  async function fetchProfile(token) {\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(\"Token: \" + token);\n    console.log(result.status);\n    return await result.json();\n  }\n  refresh();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => refresh(),\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(MainComponent, \"XFz5EJyCizx7LA5fO006y57F4cI=\");\n_c = MainComponent;\nexport default MainComponent;\nvar _c;\n$RefreshReg$(_c, \"MainComponent\");","map":{"version":3,"names":["React","useEffect","useState","firebase","EmailAuthCredential","getAuth","onAuthStateChanged","getDatabase","ref","set","get","onValue","app","jsxDEV","_jsxDEV","clientID","redirectURL","MainComponent","_s","name","setName","currentAccessToken","setToken","uid","setUid","email","setEmail","auth","user","currentEmail","console","log","params","URLSearchParams","window","location","search","code","handleAuthentication","redirectToAuthCodeFlow","getAccessToken","profile","fetchProfile","is_playing","item","writeData","currentPlayingSong","db","userName","currentSong","getUsers","usersRef","dataSnapshot","exists","users","val","userId","error","refresh","accessToken","clientId","verifier","generateCodeVerifier","challenge","generateCodeChallenge","localStorage","setItem","append","document","toString","length","text","possible","i","charAt","Math","floor","random","codeVerifier","encoder","TextEncoder","data","encode","digest","crypto","subtle","btoa","String","fromCharCode","Uint8Array","replace","getItem","result","fetch","method","headers","body","json","access_token","undefined","token","Authorization","status","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/src/SpotifyPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app'\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, get, onValue } from \"firebase/database\";\nimport { app } from './Firebase/config';\n\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\nconst redirectURL = \"http://localhost:3000/main\";\n\n\nconst MainComponent = () => {\n  const [name, setName] = useState(\"No Currently Playing\");\n  const [currentAccessToken, setToken] = useState(\"\");\n  const [uid, setUid] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  useEffect(() => {\n    const auth = getAuth();\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/auth.user\n        const uid = user.uid;\n        const currentEmail = user.email;\n        console.log(\"Got here!\");\n        setEmail(currentEmail);\n        setUid(uid);\n        // ...\n      } else {\n        console.log(\"signed out\");\n        // User is signed out\n        // ...\n      }\n    });\n\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n\n    const handleAuthentication = async () => {\n      if (!code) {\n        redirectToAuthCodeFlow(clientID);\n      } else {\n        console.log(\"got here!\");\n        await getAccessToken(clientID, code);\n\n\n        const profile = await fetchProfile(currentAccessToken);\n        //setToken(current);\n        if (profile.is_playing === true) {\n          setName(profile.item.name);\n        }\n\n\n        else {\n          setName(\"Nothing is currently playing.\")\n        }\n      }\n    };\n\n    handleAuthentication();\n\n    \n    \n    \n\n  }, []);\n\n  function writeData(currentPlayingSong) {\n    const db = getDatabase();\n    set(ref(db, \"users/\" + uid), {\n        userName:email,\n        currentSong:currentPlayingSong\n    });\n  }\n\n  const getUsers = async () => {\n    const db = getDatabase();\n    try {\n      const usersRef = ref(db, 'users');\n      const dataSnapshot = await get(usersRef);\n  \n      if (dataSnapshot.exists()) {\n        const users = dataSnapshot.val();\n        console.log(users);\n        for(const userId in users) {\n          const user = users[userId];\n          console.log(user.currentSong);\n        }\n      } else {\n        console.log('No users found');\n      }\n    } catch (error) {\n      console.log('Error getting users:', error);\n    }\n  };\n\n\n  const params = new URLSearchParams(window.location.search);\n  const code = params.get('code')\n\n\n  const refresh = async () => {\n    const accessToken = await getAccessToken(clientID, code);\n    const profile = await fetchProfile(currentAccessToken);\n    \n    if (profile.is_playing === true) {\n      setName(profile.item.name);\n      writeData(profile.item.name);\n      getUsers();\n    }\n    else {\n      setName(\"Nothing is currently playing.\")\n    }\n\n  }\n\n  async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n\n    localStorage.setItem(\"verifier\", verifier);\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", redirectURL);\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  }\n\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n\n  async function generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n  }\n\n  async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\n    params.append(\"code_verifier\", verifier);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: params\n    });\n\n    console.log(result.json);\n    const { access_token } = await result.json();\n\n    if (access_token !== undefined) {\n      setToken(access_token);\n      localStorage.setItem(\"accessToken\", access_token);\n    }\n    return access_token;\n  }\n\n  async function fetchProfile(token) {\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    console.log(\"Token: \" + token);\n    console.log(result.status);\n    return await result.json();\n  }\n\n  refresh();\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <button onClick={() => refresh()}>Refresh</button>\n    </div>\n  );\n};\n\nexport default MainComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}