{"ast":null,"code":"var _jsxFileName = \"/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js\";\n// import React from 'react';\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }  \n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n// // export default App;\n// import React from 'react';\n// import { getDatabase, ref, set } from \"firebase/database\";\n// import { initializeApp } from \"firebase/app\";\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n//   authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n//   databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n//   projectId: \"spotifybuds-e7e29\",\n//   storageBucket: \"spotifybuds-e7e29.appspot.com\",\n//   messagingSenderId: \"566960468786\",\n//   appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n//   measurementId: \"G-N3X3577Z70\"\n// };\n\n// initializeApp(firebaseConfig);\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n\n//           // Write user data to Firebase database\n//           const db = getDatabase();\n//           const userId = \"user123\"; // Provide a unique user ID\n//           set(ref(db, 'Users/' + userId), {\n//             latitude: latitude,\n//             longitude: longitude,\n//             address: address\n//           });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }\n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n\n// export default App;\nimport React from 'react';\nimport { getDatabase, ref, set, child, get } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n};\ninitializeApp(firebaseConfig);\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      userAddress: null,\n      closestUsers: [],\n      radius: 5 // Default radius of 5 feet\n    };\n\n    this.getLocation = this.getLocation.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getUserAddress = this.getUserAddress.bind(this);\n    this.handleRadiusChange = this.handleRadiusChange.bind(this);\n  }\n  componentDidMount() {\n    this.getLocation();\n    this.interval = setInterval(this.getLocation, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  getCoordinates(position) {\n    this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }, this.getUserAddress);\n  }\n  getUserAddress() {\n    const {\n      latitude,\n      longitude,\n      radius\n    } = this.state;\n    if (latitude && longitude) {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`).then(response => response.json()).then(data => {\n        const address = data.results[0].formatted_address;\n        this.setState({\n          userAddress: address\n        });\n        const dbRef = ref(getDatabase());\n        get(child(dbRef, \"users\")).then(snapshot => {\n          if (snapshot.exists()) {\n            const users = snapshot.val();\n            const closestUsers = this.findClosestUsers(latitude, longitude, users, radius);\n            this.setState({\n              closestUsers: closestUsers\n            });\n            const db = getDatabase();\n            for (const userId in users) {\n              const user = users[userId];\n              const {\n                latitude: userLat,\n                longitude: userLon\n              } = user;\n              set(ref(db, `users/${userId}/address`), address);\n              set(ref(db, `users/${userId}/distance`), this.calculateDistance(latitude, longitude, userLat, userLon));\n            }\n          } else {\n            console.log(\"No user data available\");\n          }\n        }).catch(error => {\n          console.error(error);\n        });\n      }).catch(error => alert(error));\n    }\n  }\n  handleLocationError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        alert(\"User denied the request for Geolocation.\");\n        break;\n      case error.POSITION_UNAVAILABLE:\n        alert(\"Location information is unavailable.\");\n        break;\n      case error.TIMEOUT:\n        alert(\"The request to get user location timed out.\");\n        break;\n      case error.UNKNOWN_ERROR:\n        alert(\"An unknown error occurred.\");\n        break;\n      default:\n        alert(\"An unknown error occurred.\");\n    }\n  }\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = earthRadiusInFeet * c;\n    return distance;\n  }\n  toRadians(degree) {\n    return degree * (Math.PI / 180);\n  }\n  findClosestUsers(userLat, userLon, users, radius) {\n    const distances = [];\n    for (const userId in users) {\n      const user = users[userId];\n      const {\n        lat,\n        lon,\n        name\n      } = user;\n      const distance = this.calculateDistance(userLat, userLon, lat, lon);\n      if (distance <= radius) {\n        distances.push({\n          user: name,\n          distance: distance\n        });\n      }\n    }\n    distances.sort((a, b) => a.distance - b.distance);\n    return distances;\n  }\n  handleRadiusChange(event) {\n    this.setState({\n      radius: event.target.value\n    });\n  }\n  render() {\n    const {\n      latitude,\n      longitude,\n      userAddress,\n      closestUsers,\n      radius\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Find Closest Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latitude: \", latitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Longitude: \", longitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Address: \", userAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Radius (in feet):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: radius,\n        onChange: this.handleRadiusChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Closest Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), closestUsers.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: closestUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"User: \", user.user, \", Distance: \", user.distance, \" feet\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No users found within the specified radius.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","getDatabase","ref","set","child","get","initializeApp","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","Component","constructor","props","state","latitude","longitude","userAddress","closestUsers","radius","getLocation","bind","getCoordinates","getUserAddress","handleRadiusChange","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","navigator","geolocation","getCurrentPosition","handleLocationError","alert","position","setState","coords","fetch","then","response","json","data","address","results","formatted_address","dbRef","snapshot","exists","users","val","findClosestUsers","db","userId","user","userLat","userLon","calculateDistance","console","log","catch","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","lat1","lon1","lat2","lon2","earthRadiusInFeet","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","degree","PI","distances","lat","lon","name","push","sort","b","event","target","value","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","length","map","index"],"sources":["/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js"],"sourcesContent":["\n// import React from 'react';\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n  \n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }  \n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n// // export default App;\n// import React from 'react';\n// import { getDatabase, ref, set } from \"firebase/database\";\n// import { initializeApp } from \"firebase/app\";\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n//   authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n//   databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n//   projectId: \"spotifybuds-e7e29\",\n//   storageBucket: \"spotifybuds-e7e29.appspot.com\",\n//   messagingSenderId: \"566960468786\",\n//   appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n//   measurementId: \"G-N3X3577Z70\"\n// };\n\n// initializeApp(firebaseConfig);\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n\n//           // Write user data to Firebase database\n//           const db = getDatabase();\n//           const userId = \"user123\"; // Provide a unique user ID\n//           set(ref(db, 'Users/' + userId), {\n//             latitude: latitude,\n//             longitude: longitude,\n//             address: address\n//           });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }\n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n\n// export default App;\nimport React from 'react';\nimport { getDatabase, ref, set, child, get } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n};\n\ninitializeApp(firebaseConfig);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      userAddress: null,\n      closestUsers: [],\n      radius: 5 // Default radius of 5 feet\n    };\n    this.getLocation = this.getLocation.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getUserAddress = this.getUserAddress.bind(this);\n    this.handleRadiusChange = this.handleRadiusChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getLocation();\n    this.interval = setInterval(this.getLocation, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  getCoordinates(position) {\n    this.setState(\n      {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      },\n      this.getUserAddress\n    );\n  }\n\n  getUserAddress() {\n    const { latitude, longitude, radius } = this.state;\n    if (latitude && longitude) {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n        .then(response => response.json())\n        .then(data => {\n          const address = data.results[0].formatted_address;\n          this.setState({ userAddress: address });\n\n          const dbRef = ref(getDatabase());\n          get(child(dbRef, \"users\")).then((snapshot) => {\n            if (snapshot.exists()) {\n              const users = snapshot.val();\n              const closestUsers = this.findClosestUsers(latitude, longitude, users, radius);\n              this.setState({ closestUsers: closestUsers });\n\n              const db = getDatabase();\n              for (const userId in users) {\n                const user = users[userId];\n                const { latitude: userLat, longitude: userLon } = user;\n                set(ref(db, `users/${userId}/address`), address);\n                set(ref(db, `users/${userId}/distance`), this.calculateDistance(latitude, longitude, userLat, userLon));\n              }\n            } else {\n              console.log(\"No user data available\");\n            }\n          }).catch((error) => {\n            console.error(error);\n          });\n        })\n        .catch(error => alert(error));\n    }\n  }\n\n  handleLocationError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        alert(\"User denied the request for Geolocation.\");\n        break;\n      case error.POSITION_UNAVAILABLE:\n        alert(\"Location information is unavailable.\");\n        break;\n      case error.TIMEOUT:\n        alert(\"The request to get user location timed out.\");\n        break;\n      case error.UNKNOWN_ERROR:\n        alert(\"An unknown error occurred.\");\n        break;\n      default:\n        alert(\"An unknown error occurred.\");\n    }\n  }\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = earthRadiusInFeet * c;\n    return distance;\n  }\n\n  toRadians(degree) {\n    return degree * (Math.PI / 180);\n  }\n\n  findClosestUsers(userLat, userLon, users, radius) {\n    const distances = [];\n\n    for (const userId in users) {\n      const user = users[userId];\n      const { lat, lon, name } = user;\n      const distance = this.calculateDistance(userLat, userLon, lat, lon);\n      if (distance <= radius) {\n        distances.push({ user: name, distance: distance });\n      }\n    }\n\n    distances.sort((a, b) => a.distance - b.distance);\n\n    return distances;\n  }\n\n  handleRadiusChange(event) {\n    this.setState({ radius: event.target.value });\n  }\n\n  render() {\n    const { latitude, longitude, userAddress, closestUsers, radius } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Find Closest Users</h1>\n        <p>Latitude: {latitude}</p>\n        <p>Longitude: {longitude}</p>\n        <p>Address: {userAddress}</p>\n        <p>Radius (in feet):</p>\n        <input type=\"number\" value={radius} onChange={this.handleRadiusChange} />\n        <h2>Closest Users</h2>\n        {closestUsers.length > 0 ? (\n          <ul>\n            {closestUsers.map((user, index) => (\n              <li key={index}>\n                User: {user.user}, Distance: {user.distance} feet\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No users found within the specified radius.</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}