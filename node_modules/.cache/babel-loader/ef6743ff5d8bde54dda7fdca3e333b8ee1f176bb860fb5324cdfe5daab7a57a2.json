{"ast":null,"code":"var _jsxFileName = \"/Users/shawnim/Documents/GitHub/SpotifyAppCS35L/src/screens/spotify/index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, get, onValue, update, push } from \"firebase/database\";\nimport \"./spotify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\nconst redirectURL = \"http://localhost:3000/main\";\nconst MainComponent = () => {\n  _s();\n  const [name, setName] = useState(\"Nothing Currently Playing.\");\n  const [currentAccessToken, setToken] = useState(\"\");\n  const [uid, setUid] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  const [longitude, setLongitude] = useState(0.0);\n  const [users, setUsers] = useState([]);\n  const [song, setSong] = useState(\"Cannot fetch song!\");\n  const [artists, setArtists] = useState([]);\n  const updatePosition = () => {\n    const position = navigator.geolocation.getCurrentPosition(position => {\n      console.log(position.coords.latitude);\n      console.log(position.coords.longitude);\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n  };\n  useEffect(() => {\n    updatePosition();\n    const auth = getAuth();\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/auth.user\n        const uid = user.uid;\n        const currentEmail = user.email;\n        console.log(\"userEmail \" + currentEmail);\n        setEmail(currentEmail);\n        setUid(uid);\n        // ...\n      } else {\n        console.log(\"signed out\");\n        // User is signed out\n        // ...\n      }\n    });\n\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n    const handleAuthentication = async () => {\n      if (!code) {\n        redirectToAuthCodeFlow(clientID);\n      } else {\n        console.log(\"got here!\");\n        if (currentAccessToken === \"\") {\n          await getAccessToken(clientID, code);\n        }\n        const profile = await fetchProfile();\n        writeData();\n        getUsers();\n        //setToken(current);\n        // console.log(profile);\n        // if (profile !== null) {\n        //   if (profile.is_playing === true) {\n        //     if (song === \"Cannot fetch song!\")\n        //       setName();\n        //       writeData();\n        //       getUsers();\n\n        //   }\n        //   else {\n        //     writeData();\n        //     getUsers();\n        //     setName(\"Nothing is currently playing.\")\n        //     //getUsers();\n        //   }\n        // }\n\n        // else {\n        //   writeData();\n        //   getUsers();\n        //   setName(\"Nothing is currently playing.\")\n        //   //getUsers();\n        // }\n      }\n    };\n\n    handleAuthentication();\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refresh();\n    }, 2000);\n    return () => clearInterval(interval);\n  });\n  function writeData(currentPlayingSong) {\n    updatePosition();\n    if (song === \"Cannot fetch song!\") {\n      return;\n    }\n    console.log(\"Song \" + song);\n    const database = getDatabase();\n\n    // User data to be added or updated\n    const user = {\n      userName: email,\n      currentSong: song,\n      latitude: latitude,\n      longitude: longitude,\n      artists: artists\n    };\n\n    // Reference to the user's location in the database\n    console.log(uid);\n    const userRef = ref(database, 'users/' + uid);\n\n    // Check if the user already exists\n    get(userRef).then(snapshot => {\n      if (snapshot.exists()) {\n        // User exists, update the existing user's information\n        update(userRef, user).then(() => {\n          console.log(\"User information updated successfully\");\n        }).catch(error => {\n          console.error(\"Error updating user information:\", error);\n        });\n      } else {\n        // User doesn't exist, add a new user using push()\n        const newUserRef = ref(database, 'users/' + uid);\n        set(newUserRef, user).then(() => {\n          console.log(\"New user added successfully\");\n        }).catch(error => {\n          console.error(\"Error adding new user:\", error);\n        });\n      }\n    }).catch(error => {\n      console.error(\"Error checking user existence:\", error);\n    });\n\n    // set(ref(db, \"users/\" + uid), {\n    //   userName: email,\n    //   currentSong: song,\n    //   latitude: latitude,\n    //   longitude: longitude,\n    //   artists: artists\n    // });\n  }\n\n  const getUsers = async () => {\n    const db = getDatabase();\n    updatePosition();\n    const usersRef = ref(db, 'users');\n    get(usersRef).then(snapshot => {\n      if (snapshot.exists()) {\n        const users = snapshot.val();\n        console.log(users);\n        const closest = findClosestUsers(latitude, longitude, users, 1000);\n        //console.log(\"closests: \" + closest[0].artists);\n        setUsers(closest);\n      }\n    });\n  };\n\n  //   if (dataSnapshot.exists()) {\n  //     const users = dataSnapshot.val();\n  //     console.log(\"users: \" + users.name);\n\n  //   } else {\n  //     console.log('No users found');\n  //   }\n  // } catch (error) {\n  //   console.log('Error getting users:', error);\n  // }\n\n  const params = new URLSearchParams(window.location.search);\n  const code = params.get('code');\n  const refresh = async () => {\n    updatePosition();\n    if (currentAccessToken === \"\") {\n      await getAccessToken(clientID, code);\n    }\n    const profile = await fetchProfile();\n    console.log(song);\n    writeData();\n    getUsers();\n\n    // if (profile !== null) {\n    //   if (profile.is_playing === true) {\n    //     //setName(profile.item.name);\n    //     writeData();\n    //     getUsers();\n    //   }\n    //   else {\n    //     getUsers();\n    //     setName(\"Nothing is currently playing.\")\n    //   }\n    // }\n\n    // else {\n    //   writeData();\n    //   getUsers();\n    //   setName(\"Nothing is currently playing.\")\n    // }\n  };\n\n  async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n    localStorage.setItem(\"verifier\", verifier);\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", redirectURL);\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played user-top-read\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  }\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  async function generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\n    params.append(\"code_verifier\", verifier);\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: params\n    });\n    const {\n      access_token\n    } = await result.json();\n    if (access_token !== undefined) {\n      setToken(access_token);\n      localStorage.setItem(\"accessToken\", access_token);\n    }\n    return access_token;\n  }\n  async function fetchProfile() {\n    console.log(\"at fetch profile\");\n    const token = localStorage.getItem(\"accessToken\");\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(result);\n    const artistsTop = await fetch(\"https://api.spotify.com/v1/me/top/artists?limit=3\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const artistTopJson = await artistsTop.json();\n    if (result.status === 204) {\n      setSong(\"Nothing is currently playing\");\n      return null;\n    }\n    const currentPlaying = await result.json();\n    setArtists(artistTopJson.items);\n    if (result.status === 200) {\n      if (currentPlaying.is_playing === true) {\n        setSong(currentPlaying.item.name);\n      }\n    }\n    if (currentPlaying.is_playing === false) {\n      setSong(\"Nothing is Currently Playing!\");\n      return null;\n    }\n    console.log(currentPlaying);\n    //console.log(currentPlaying.item.name);\n\n    return currentPlaying;\n  }\n  function calculateDistance(lat1, lon1, lat2, lon2) {\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n    const dLat = toRadians(lat2 - lat1);\n    const dLon = toRadians(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distanceInFeet = earthRadiusInFeet * c;\n    const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n    return roundedDistance;\n  }\n  function toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n  function findClosestUsers(userLat, userLon, database, radius) {\n    const distances = [];\n    //onsole.log(\"Database: \" + database);\n    for (const person in database) {\n      //console.log(database[person]);\n      const distance = calculateDistance(userLat, userLon, database[person].latitude, database[person].longitude);\n      //console.log(\"distance: \" + distance);\n      console.log(\"distance; \" + distance);\n      if (distance <= radius) {\n        distances.push({\n          user: database[person].userName,\n          distance: distance,\n          song: database[person].currentSong,\n          artists: database[person].artists,\n          distance: distance\n        });\n      }\n    }\n    distances.sort((a, b) => a.distance - b.distance);\n    console.log(\"this.state.distances:\", distances);\n    return distances;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-container\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: users.length > 0 ? users.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"infoStyle\",\n            children: item.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"infoStyle\",\n            children: [\"Listening to: \", item.song]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"infoStyle\",\n            children: \"Distance away: \" + item.distance + \" feet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 17\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No users available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => refresh(),\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n_s(MainComponent, \"S1s2uxNBxc+LnZGANJET/K2ck9A=\");\n_c = MainComponent;\nexport default MainComponent;\nvar _c;\n$RefreshReg$(_c, \"MainComponent\");","map":{"version":3,"names":["React","useEffect","useState","firebase","EmailAuthCredential","getAuth","onAuthStateChanged","getDatabase","ref","set","get","onValue","update","push","jsxDEV","_jsxDEV","clientID","redirectURL","MainComponent","_s","name","setName","currentAccessToken","setToken","uid","setUid","email","setEmail","latitude","setLatitude","longitude","setLongitude","users","setUsers","song","setSong","artists","setArtists","updatePosition","position","navigator","geolocation","getCurrentPosition","console","log","coords","auth","user","currentEmail","params","URLSearchParams","window","location","search","code","handleAuthentication","redirectToAuthCodeFlow","getAccessToken","profile","fetchProfile","writeData","getUsers","interval","setInterval","refresh","clearInterval","currentPlayingSong","database","userName","currentSong","userRef","then","snapshot","exists","catch","error","newUserRef","db","usersRef","val","closest","findClosestUsers","clientId","verifier","generateCodeVerifier","challenge","generateCodeChallenge","localStorage","setItem","append","document","toString","length","text","possible","i","charAt","Math","floor","random","codeVerifier","encoder","TextEncoder","data","encode","digest","crypto","subtle","btoa","String","fromCharCode","Uint8Array","replace","getItem","result","fetch","method","headers","body","access_token","json","undefined","token","Authorization","artistsTop","artistTopJson","status","currentPlaying","items","is_playing","item","calculateDistance","lat1","lon1","lat2","lon2","earthRadiusInFeet","dLat","toRadians","dLon","a","sin","cos","c","atan2","sqrt","distanceInFeet","roundedDistance","toFixed","degrees","PI","userLat","userLon","radius","distances","person","distance","sort","b","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["/Users/shawnim/Documents/GitHub/SpotifyAppCS35L/src/screens/spotify/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app'\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, get, onValue, update, push } from \"firebase/database\";\nimport \"./spotify.css\";\n\n\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\nconst redirectURL = \"http://localhost:3000/main\";\n\n\nconst MainComponent = () => {\n  const [name, setName] = useState(\"Nothing Currently Playing.\");\n  const [currentAccessToken, setToken] = useState(\"\");\n  const [uid, setUid] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  const [longitude, setLongitude] = useState(0.0);\n  const [users, setUsers] = useState([]);\n  const [song, setSong] = useState(\"Cannot fetch song!\");\n  const [artists, setArtists] = useState([]);\n\n  const updatePosition = () => {\n    const position = navigator.geolocation.getCurrentPosition((position) => {\n      console.log(position.coords.latitude);\n      console.log(position.coords.longitude);\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n\n    });\n  };\n\n  useEffect(() => {\n    updatePosition();\n\n    const auth = getAuth();\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/auth.user\n        const uid = user.uid;\n        const currentEmail = user.email;\n        console.log(\"userEmail \" + currentEmail);\n        setEmail(currentEmail);\n        setUid(uid);\n        // ...\n      } else {\n        console.log(\"signed out\");\n        // User is signed out\n        // ...\n      }\n    });\n\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n\n    const handleAuthentication = async () => {\n      if (!code) {\n        redirectToAuthCodeFlow(clientID);\n      } else {\n        console.log(\"got here!\");\n        if (currentAccessToken === \"\") {\n          await getAccessToken(clientID, code);\n        }\n\n\n        const profile = await fetchProfile();\n        writeData();\n        getUsers();\n        //setToken(current);\n        // console.log(profile);\n        // if (profile !== null) {\n        //   if (profile.is_playing === true) {\n        //     if (song === \"Cannot fetch song!\")\n        //       setName();\n        //       writeData();\n        //       getUsers();\n\n        //   }\n        //   else {\n        //     writeData();\n        //     getUsers();\n        //     setName(\"Nothing is currently playing.\")\n        //     //getUsers();\n        //   }\n        // }\n\n\n        // else {\n        //   writeData();\n        //   getUsers();\n        //   setName(\"Nothing is currently playing.\")\n        //   //getUsers();\n        // }\n\n\n      }\n    };\n\n    handleAuthentication();\n\n\n\n\n\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refresh();\n    }, 2000);\n\n    return () => clearInterval(interval);\n  });\n\n  function writeData(currentPlayingSong) {\n\n    updatePosition();\n    if (song === \"Cannot fetch song!\") {\n      return;\n    }\n\n    console.log(\"Song \" + song);\n    const database = getDatabase();\n\n    // User data to be added or updated\n    const user = {\n      userName: email,\n      currentSong: song,\n      latitude: latitude,\n      longitude: longitude,\n      artists: artists\n    };\n\n    // Reference to the user's location in the database\n    console.log(uid);\n    const userRef = ref(database, 'users/' + uid);\n\n    // Check if the user already exists\n    get(userRef)\n      .then(snapshot => {\n        if (snapshot.exists()) {\n          // User exists, update the existing user's information\n          update(userRef, user)\n            .then(() => {\n              console.log(\"User information updated successfully\");\n            })\n            .catch(error => {\n              console.error(\"Error updating user information:\", error);\n            });\n        } else {\n          // User doesn't exist, add a new user using push()\n          const newUserRef = ref(database, 'users/' + uid);\n          set(newUserRef, user)\n            .then(() => {\n              console.log(\"New user added successfully\");\n            })\n            .catch(error => {\n              console.error(\"Error adding new user:\", error);\n            });\n        }\n      })\n      .catch(error => {\n        console.error(\"Error checking user existence:\", error);\n      });\n\n    // set(ref(db, \"users/\" + uid), {\n    //   userName: email,\n    //   currentSong: song,\n    //   latitude: latitude,\n    //   longitude: longitude,\n    //   artists: artists\n    // });\n  }\n\n  const getUsers = async () => {\n    const db = getDatabase();\n    updatePosition();\n    const usersRef = ref(db, 'users');\n    get(usersRef).then((snapshot) => {\n      if (snapshot.exists()) {\n        const users = snapshot.val();\n        console.log(users);\n        const closest = findClosestUsers(latitude, longitude, users, 1000);\n        //console.log(\"closests: \" + closest[0].artists);\n        setUsers(closest);\n\n      }\n    });\n  }\n\n  //   if (dataSnapshot.exists()) {\n  //     const users = dataSnapshot.val();\n  //     console.log(\"users: \" + users.name);\n\n\n  //   } else {\n  //     console.log('No users found');\n  //   }\n  // } catch (error) {\n  //   console.log('Error getting users:', error);\n  // }\n\n\n\n  const params = new URLSearchParams(window.location.search);\n  const code = params.get('code')\n\n\n  const refresh = async () => {\n    updatePosition();\n    if (currentAccessToken === \"\") {\n      await getAccessToken(clientID, code);\n    }\n    const profile = await fetchProfile();\n\n    console.log(song);\n    writeData();\n    getUsers();\n\n    // if (profile !== null) {\n    //   if (profile.is_playing === true) {\n    //     //setName(profile.item.name);\n    //     writeData();\n    //     getUsers();\n    //   }\n    //   else {\n    //     getUsers();\n    //     setName(\"Nothing is currently playing.\")\n    //   }\n    // }\n\n\n    // else {\n    //   writeData();\n    //   getUsers();\n    //   setName(\"Nothing is currently playing.\")\n    // }\n\n\n  }\n\n  async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n\n    localStorage.setItem(\"verifier\", verifier);\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", redirectURL);\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played user-top-read\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  }\n\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n\n  async function generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n  }\n\n  async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\n    params.append(\"code_verifier\", verifier);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: params\n    });\n\n    const { access_token } = await result.json();\n\n    if (access_token !== undefined) {\n      setToken(access_token);\n      localStorage.setItem(\"accessToken\", access_token);\n    }\n    return access_token;\n  }\n\n\n  async function fetchProfile() {\n    console.log(\"at fetch profile\");\n    const token = localStorage.getItem(\"accessToken\");\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${token}` }\n    });\n\n    console.log(result);\n    const artistsTop = await fetch(\"https://api.spotify.com/v1/me/top/artists?limit=3\", {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${token}` }\n    });\n\n    const artistTopJson = await artistsTop.json();\n    if (result.status === 204) {\n        setSong(\"Nothing is currently playing\");\n        return null;\n    }\n\n    const currentPlaying = await result.json();\n\n\n    setArtists(artistTopJson.items);\n\n    if (result.status === 200) {\n      if (currentPlaying.is_playing === true) {\n        setSong(currentPlaying.item.name);\n\n      }\n    }\n    \n\n\n    if(currentPlaying.is_playing === false) {\n      setSong(\"Nothing is Currently Playing!\");\n      return null;\n    }\n    console.log(currentPlaying);\n    //console.log(currentPlaying.item.name);\n    \n\n    \n    \n\n    return currentPlaying;\n  }\n\n  function calculateDistance(lat1, lon1, lat2, lon2) {\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n    const dLat = toRadians(lat2 - lat1);\n    const dLon = toRadians(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distanceInFeet = earthRadiusInFeet * c;\n    const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n    return roundedDistance;\n  }\n\n  function toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  function findClosestUsers(userLat, userLon, database, radius) {\n    const distances = [];\n    //onsole.log(\"Database: \" + database);\n    for (const person in database) {\n      //console.log(database[person]);\n      const distance = calculateDistance(userLat, userLon, database[person].latitude, database[person].longitude);\n      //console.log(\"distance: \" + distance);\n      console.log(\"distance; \" + distance);\n      if (distance <= radius) {\n        distances.push({ user: database[person].userName, distance: distance, song: database[person].currentSong, artists: database[person].artists, distance : distance });\n      }\n    }\n\n    distances.sort((a, b) => a.distance - b.distance);\n    console.log(\"this.state.distances:\", distances);\n    return distances;\n  }\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"box\">\n        \n      <div className=\"list-container\">\n        <ul className=\"list\">\n          {users.length > 0 ? (\n            users.map((item) => (\n              <li key={item.id} className=\"wrapper\">\n                <h3 className=\"infoStyle\">{item.user}</h3>\n                <p className=\"infoStyle\">{\"Listening to: \"}{item.song}</p>\n                <p className = \"infoStyle\">{\"Distance away: \" + item.distance + \" feet\"}</p>\n                {/* { <p className=\"infoStyle\">\n                  {item.artists.map((artist, index) => (\n                    <span key={index}>\n                      {artist.name}\n                      {index !== item.artists.length - 1 && \",\"}\n                    </span>\n                  ))}\n                </p>               } */}\n              </li>\n            ))\n          ) : (\n            <p>No users available.</p>\n          )}\n        </ul>\n\n      </div>\n      <button onClick={() => refresh()}>Refresh</button>\n    </div>\n  );\n\n\n};\n\nexport default MainComponent"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}