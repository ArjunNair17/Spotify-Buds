{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules, Platform } from 'react-native';\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule;\n  _eventEmitter;\n  constructor(nativeModule) {\n    // Expo modules installed through the JSI don't have `addListener` and `removeListeners` set,\n    // so if someone wants to use them with `EventEmitter`, make sure to provide these functions\n    // as they are required by `NativeEventEmitter`. This is only temporary — in the future\n    // JSI modules will have event emitter built in.\n    if (nativeModule.__expo_module_name__ && NativeModules.EXReactNativeEventEmitter) {\n      nativeModule.addListener = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return NativeModules.EXReactNativeEventEmitter.addProxiedListener(nativeModule.__expo_module_name__, ...args);\n      };\n      nativeModule.removeListeners = function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        return NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(nativeModule.__expo_module_name__, ...args);\n      };\n    }\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n  addListener(eventName, listener) {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      }\n    };\n    return subscription;\n  }\n  removeAllListeners(eventName) {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount ?\n    // @ts-ignore: this is available since 0.64\n    this._eventEmitter.listenerCount(eventName) :\n    // @ts-ignore: this is available in older versions\n    this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n  removeSubscription(subscription) {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n    }\n    this._listenerCount--;\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n  emit(eventName) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      params[_key3 - 1] = arguments[_key3];\n    }\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}","map":{"version":3,"names":["invariant","NativeEventEmitter","NativeModules","Platform","nativeEmitterSubscriptionKey","EventEmitter","_listenerCount","_nativeModule","_eventEmitter","constructor","nativeModule","__expo_module_name__","EXReactNativeEventEmitter","addListener","_len","arguments","length","args","Array","_key","addProxiedListener","removeListeners","_len2","_key2","removeProxiedListeners","eventName","listener","OS","startObserving","nativeEmitterSubscription","subscription","remove","removeSubscription","removeAllListeners","removedListenerCount","listenerCount","listeners","stopObserving","emit","_len3","params","_key3"],"sources":["/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/node_modules/expo-modules-core/src/EventEmitter.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  __expo_module_name__?: string;\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    // Expo modules installed through the JSI don't have `addListener` and `removeListeners` set,\n    // so if someone wants to use them with `EventEmitter`, make sure to provide these functions\n    // as they are required by `NativeEventEmitter`. This is only temporary — in the future\n    // JSI modules will have event emitter built in.\n    if (nativeModule.__expo_module_name__ && NativeModules.EXReactNativeEventEmitter) {\n      nativeModule.addListener = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.addProxiedListener(\n          nativeModule.__expo_module_name__,\n          ...args\n        );\n      nativeModule.removeListeners = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(\n          nativeModule.__expo_module_name__,\n          ...args\n        );\n    }\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}