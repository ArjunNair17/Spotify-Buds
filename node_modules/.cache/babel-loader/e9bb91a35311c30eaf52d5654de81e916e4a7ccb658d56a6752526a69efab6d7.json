{"ast":null,"code":"var _jsxFileName = \"/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { getDatabase, ref, onValue } from \"firebase/database\";\n// import { initializeApp } from \"firebase/app\";\n// import './App.css';\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n//   authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n//   databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n//   projectId: \"spotifybuds-e7e29\",\n//   storageBucket: \"spotifybuds-e7e29.appspot.com\",\n//   messagingSenderId: \"566960468786\",\n//   appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n//   measurementId: \"G-N3X3577Z70\"\n//  }; \n\n// initializeApp(firebaseConfig);\n\n// const App = () => {\n//   useEffect(() => {\n//     fetchUserData();\n//     const interval = setInterval(getLocation, 30000); // Update every 30 seconds\n//     return () => clearInterval(interval); // Clean up the interval on component unmount\n//   }, []);\n\n//   const fetchUserData = () => {\n//     const db = getDatabase();\n//     const usersRef = ref(db, \"Users\");\n\n//     onValue(usersRef, (snapshot) => {\n//       const userData = snapshot.val();\n//       if (userData) {\n//         const markers = Object.values(userData).map((user) => {\n//           const { latitude, longitude } = user;\n//           console.log(\"user: \", user);\n//           return [`${user.userName}'s Location`, latitude, longitude];\n//         });\n\n//         initMap(markers);\n//       }\n//     });\n//   };\n\n//   const getLocation = () => {\n//     fetchUserData();\n//   };\n\n//   const initMap = (markers) => {\n//     const loadMap = () => {\n//       const mapOptions = {\n//         center: { lat: markers[0][1], lng: markers[0][2] },\n//         zoom: 13,\n//         mapTypeId: 'roadmap'\n//       };\n\n//       const map = new window.google.maps.Map(document.getElementById(\"mapCanvas\"), mapOptions);\n\n//       const bounds = new window.google.maps.LatLngBounds();\n\n//       const infoWindow = new window.google.maps.InfoWindow();\n\n//       markers.forEach((markerData) => {\n//         const [title, lat, lng] = markerData;\n//         console.log(\"Title:\", title);\n//         const position = new window.google.maps.LatLng(lat, lng);\n\n//         bounds.extend(position);\n\n//         const marker = new window.google.maps.Marker({\n//           position: position,\n//           map: map,\n//           title: title\n//         });\n//         console.log(\"Title:\", title);\n\n//         window.google.maps.event.addListener(marker, 'click', () => {\n//           infoWindow.setContent(`<div class=\"info_content\">\n//             <h2>${title}</h2>\n//             <h3>Latitude: ${lat}, Longitude: ${lng}</h3>\n//             <p>Additional information about the user or location.</p>\n//           </div>`);\n//           infoWindow.open(map, marker);\n//         });\n//       });\n\n//       map.fitBounds(bounds);\n//       map.setZoom(14);\n//     };\n\n//     const getLocation = () => {\n//       fetchUserData();\n//     };\n\n//     if (window.google && window.google.maps) {\n//       // Google Maps API is already loaded\n//       loadMap();\n//     } else {\n//       // Load the Google Maps API script\n//       const googleMapsScript = document.createElement('script');\n//       googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCGAxuT2e4fr6HcwemlAGCNJ6zsxlpUsdQ`;\n//       googleMapsScript.defer = true;\n//       googleMapsScript.onload = loadMap;\n//       document.head.appendChild(googleMapsScript);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Geolocation Finder for SpotifyBuds</h2>\n//       <div id=\"mapCanvas\" style={{ height: \"800px\" }}></div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useEffect } from 'react';\nimport { getDatabase, ref, onValue } from 'firebase/database';\nimport { initializeApp } from 'firebase/app';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n};\ninitializeApp(firebaseConfig);\nconst App = () => {\n  _s();\n  useEffect(() => {\n    fetchUserData();\n    const interval = setInterval(getLocation, 30000); // Update every 30 seconds\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n  const fetchUserData = () => {\n    const db = getDatabase();\n    const usersRef = ref(db, 'Users');\n    onValue(usersRef, snapshot => {\n      const userData = snapshot.val();\n      if (userData) {\n        const markers = Object.values(userData).map(user => {\n          const {\n            latitude,\n            longitude,\n            userName\n          } = user;\n          console.log('user: ', user);\n          return [`${userName}'s Location`, latitude, longitude];\n        });\n        initMap(markers);\n      }\n    });\n  };\n  const getLocation = () => {\n    fetchUserData();\n  };\n  const initMap = markers => {\n    const loadMap = () => {\n      const mapOptions = {\n        center: {\n          lat: markers[0][1],\n          lng: markers[0][2]\n        },\n        zoom: 13,\n        mapTypeId: 'roadmap'\n      };\n      const map = new window.google.maps.Map(document.getElementById('mapCanvas'), mapOptions);\n      const bounds = new window.google.maps.LatLngBounds();\n      const infoWindow = new window.google.maps.InfoWindow();\n      markers.forEach(markerData => {\n        const [title, lat, lng] = markerData;\n        console.log('Title:', title);\n        const position = new window.google.maps.LatLng(lat, lng);\n        bounds.extend(position);\n        const marker = new window.google.maps.Marker({\n          position: position,\n          map: map,\n          title: title\n        });\n        console.log('Title:', title);\n        window.google.maps.event.addListener(marker, 'click', () => {\n          infoWindow.setContent(`<div class=\"info_content\">\n              <h2>${title}</h2>\n              <h3>Latitude: ${lat}, Longitude: ${lng}</h3>\n              <p>Additional information about the user or location.</p>\n            </div>`);\n          infoWindow.open(map, marker);\n        });\n      });\n\n      // Add a marker for your own location\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const title = 'Your Location';\n          const userPosition = new window.google.maps.LatLng(latitude, longitude);\n          bounds.extend(userPosition);\n          const marker = new window.google.maps.Marker({\n            position: userPosition,\n            map: map,\n            title: title\n          });\n          window.google.maps.event.addListener(marker, 'click', () => {\n            infoWindow.setContent(`<div class=\"info_content\">\n                  <h2>${title}</h2>\n                  <h3>Latitude: ${latitude}, Longitude: ${longitude}</h3>\n                  <p>Additional information about your location.</p>\n                </div>`);\n            infoWindow.open(map, marker);\n          });\n          map.fitBounds(bounds);\n          map.setZoom(14);\n        }, error => {\n          console.log('Error getting current position:', error);\n        });\n      }\n      map.fitBounds(bounds);\n      map.setZoom(14);\n    };\n    if (window.google && window.google.maps) {\n      // Google Maps API is already loaded\n      loadMap();\n    } else {\n      // Load the Google Maps API script\n      const googleMapsScript = document.createElement('script');\n      googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCGAxuT2e4fr6HcwemlAGCNJ6zsxlpUsdQ`;\n      googleMapsScript.defer = true;\n      googleMapsScript.onload = loadMap;\n      document.head.appendChild(googleMapsScript);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Geolocation Finder for SpotifyBuds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapCanvas\",\n      style: {\n        height: '800px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","getDatabase","ref","onValue","initializeApp","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","_s","fetchUserData","interval","setInterval","getLocation","clearInterval","db","usersRef","snapshot","userData","val","markers","Object","values","map","user","latitude","longitude","userName","console","log","initMap","loadMap","mapOptions","center","lat","lng","zoom","mapTypeId","window","google","maps","Map","document","getElementById","bounds","LatLngBounds","infoWindow","InfoWindow","forEach","markerData","title","position","LatLng","extend","marker","Marker","event","addListener","setContent","open","navigator","geolocation","getCurrentPosition","coords","userPosition","fitBounds","setZoom","error","googleMapsScript","createElement","src","defer","onload","head","appendChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","_c","$RefreshReg$"],"sources":["/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js"],"sourcesContent":["\n// import React, { useEffect } from 'react';\n// import { getDatabase, ref, onValue } from \"firebase/database\";\n// import { initializeApp } from \"firebase/app\";\n// import './App.css';\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n//   authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n//   databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n//   projectId: \"spotifybuds-e7e29\",\n//   storageBucket: \"spotifybuds-e7e29.appspot.com\",\n//   messagingSenderId: \"566960468786\",\n//   appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n//   measurementId: \"G-N3X3577Z70\"\n//  }; \n\n// initializeApp(firebaseConfig);\n\n// const App = () => {\n//   useEffect(() => {\n//     fetchUserData();\n//     const interval = setInterval(getLocation, 30000); // Update every 30 seconds\n//     return () => clearInterval(interval); // Clean up the interval on component unmount\n//   }, []);\n\n//   const fetchUserData = () => {\n//     const db = getDatabase();\n//     const usersRef = ref(db, \"Users\");\n\n//     onValue(usersRef, (snapshot) => {\n//       const userData = snapshot.val();\n//       if (userData) {\n//         const markers = Object.values(userData).map((user) => {\n//           const { latitude, longitude } = user;\n//           console.log(\"user: \", user);\n//           return [`${user.userName}'s Location`, latitude, longitude];\n//         });\n\n//         initMap(markers);\n//       }\n//     });\n//   };\n\n//   const getLocation = () => {\n//     fetchUserData();\n//   };\n\n//   const initMap = (markers) => {\n//     const loadMap = () => {\n//       const mapOptions = {\n//         center: { lat: markers[0][1], lng: markers[0][2] },\n//         zoom: 13,\n//         mapTypeId: 'roadmap'\n//       };\n\n//       const map = new window.google.maps.Map(document.getElementById(\"mapCanvas\"), mapOptions);\n\n//       const bounds = new window.google.maps.LatLngBounds();\n\n//       const infoWindow = new window.google.maps.InfoWindow();\n\n//       markers.forEach((markerData) => {\n//         const [title, lat, lng] = markerData;\n//         console.log(\"Title:\", title);\n//         const position = new window.google.maps.LatLng(lat, lng);\n\n//         bounds.extend(position);\n\n//         const marker = new window.google.maps.Marker({\n//           position: position,\n//           map: map,\n//           title: title\n//         });\n//         console.log(\"Title:\", title);\n\n//         window.google.maps.event.addListener(marker, 'click', () => {\n//           infoWindow.setContent(`<div class=\"info_content\">\n//             <h2>${title}</h2>\n//             <h3>Latitude: ${lat}, Longitude: ${lng}</h3>\n//             <p>Additional information about the user or location.</p>\n//           </div>`);\n//           infoWindow.open(map, marker);\n//         });\n//       });\n\n//       map.fitBounds(bounds);\n//       map.setZoom(14);\n//     };\n\n//     const getLocation = () => {\n//       fetchUserData();\n//     };\n\n//     if (window.google && window.google.maps) {\n//       // Google Maps API is already loaded\n//       loadMap();\n//     } else {\n//       // Load the Google Maps API script\n//       const googleMapsScript = document.createElement('script');\n//       googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCGAxuT2e4fr6HcwemlAGCNJ6zsxlpUsdQ`;\n//       googleMapsScript.defer = true;\n//       googleMapsScript.onload = loadMap;\n//       document.head.appendChild(googleMapsScript);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Geolocation Finder for SpotifyBuds</h2>\n//       <div id=\"mapCanvas\" style={{ height: \"800px\" }}></div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useEffect } from 'react';\nimport { getDatabase, ref, onValue } from 'firebase/database';\nimport { initializeApp } from 'firebase/app';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n }; \n\ninitializeApp(firebaseConfig);\n\nconst App = () => {\n  useEffect(() => {\n    fetchUserData();\n    const interval = setInterval(getLocation, 30000); // Update every 30 seconds\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n\n  const fetchUserData = () => {\n    const db = getDatabase();\n    const usersRef = ref(db, 'Users');\n\n    onValue(usersRef, (snapshot) => {\n      const userData = snapshot.val();\n      if (userData) {\n        const markers = Object.values(userData).map((user) => {\n          const { latitude, longitude, userName } = user;\n          console.log('user: ', user);\n          return [`${userName}'s Location`, latitude, longitude];\n        });\n\n        initMap(markers);\n      }\n    });\n  };\n\n  const getLocation = () => {\n    fetchUserData();\n  };\n\n  const initMap = (markers) => {\n    const loadMap = () => {\n      const mapOptions = {\n        center: { lat: markers[0][1], lng: markers[0][2] },\n        zoom: 13,\n        mapTypeId: 'roadmap'\n      };\n\n      const map = new window.google.maps.Map(\n        document.getElementById('mapCanvas'),\n        mapOptions\n      );\n\n      const bounds = new window.google.maps.LatLngBounds();\n\n      const infoWindow = new window.google.maps.InfoWindow();\n\n      markers.forEach((markerData) => {\n        const [title, lat, lng] = markerData;\n        console.log('Title:', title);\n        const position = new window.google.maps.LatLng(lat, lng);\n\n        bounds.extend(position);\n\n        const marker = new window.google.maps.Marker({\n          position: position,\n          map: map,\n          title: title\n        });\n        console.log('Title:', title);\n\n        window.google.maps.event.addListener(marker, 'click', () => {\n          infoWindow.setContent(\n            `<div class=\"info_content\">\n              <h2>${title}</h2>\n              <h3>Latitude: ${lat}, Longitude: ${lng}</h3>\n              <p>Additional information about the user or location.</p>\n            </div>`\n          );\n          infoWindow.open(map, marker);\n        });\n      });\n\n      // Add a marker for your own location\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const { latitude, longitude } = position.coords;\n            const title = 'Your Location';\n\n            const userPosition = new window.google.maps.LatLng(\n              latitude,\n              longitude\n            );\n\n            bounds.extend(userPosition);\n\n            const marker = new window.google.maps.Marker({\n              position: userPosition,\n              map: map,\n              title: title\n            });\n\n            window.google.maps.event.addListener(marker, 'click', () => {\n              infoWindow.setContent(\n                `<div class=\"info_content\">\n                  <h2>${title}</h2>\n                  <h3>Latitude: ${latitude}, Longitude: ${longitude}</h3>\n                  <p>Additional information about your location.</p>\n                </div>`\n              );\n              infoWindow.open(map, marker);\n            });\n\n            map.fitBounds(bounds);\n            map.setZoom(14);\n          },\n          (error) => {\n            console.log('Error getting current position:', error);\n          }\n        );\n      }\n\n      map.fitBounds(bounds);\n      map.setZoom(14);\n    };\n\n    if (window.google && window.google.maps) {\n      // Google Maps API is already loaded\n      loadMap();\n    } else {\n      // Load the Google Maps API script\n      const googleMapsScript = document.createElement('script');\n      googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCGAxuT2e4fr6HcwemlAGCNJ6zsxlpUsdQ`;\n      googleMapsScript.defer = true;\n      googleMapsScript.onload = loadMap;\n      document.head.appendChild(googleMapsScript);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Geolocation Finder for SpotifyBuds</h2>\n      <div id=\"mapCanvas\" style={{ height: '800px' }}></div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}