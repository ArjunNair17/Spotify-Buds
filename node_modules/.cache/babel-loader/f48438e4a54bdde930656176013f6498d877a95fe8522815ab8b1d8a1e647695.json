{"ast":null,"code":"var _jsxFileName = \"/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/src/SpotifyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, get, onValue } from \"firebase/database\";\nimport { app } from './Firebase/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\nconst redirectURL = \"http://localhost:3000/main\";\nconst MainComponent = () => {\n  _s();\n  const [name, setName] = useState(\"Nothing Currently Playing.\");\n  const [currentAccessToken, setToken] = useState(\"\");\n  const [uid, setUid] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  const [longitude, setLongitude] = useState(0.0);\n  useEffect(() => {\n    const auth = getAuth();\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/auth.user\n        const uid = user.uid;\n        const currentEmail = user.email;\n        console.log(\"userEmail \" + currentEmail);\n        setEmail(currentEmail);\n        setUid(uid);\n        // ...\n      } else {\n        console.log(\"signed out\");\n        // User is signed out\n        // ...\n      }\n    });\n\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n    const handleAuthentication = async () => {\n      if (!code) {\n        redirectToAuthCodeFlow(clientID);\n      } else {\n        console.log(\"got here!\");\n        if (currentAccessToken === \"\") {\n          await getAccessToken(clientID, code);\n        }\n        const profile = await fetchProfile();\n        //setToken(current);\n        if (profile !== null) {\n          if (profile.is_playing === true) {\n            setName(profile.item.name);\n            writeData(profile.item.name);\n            getUsers();\n          } else {\n            setName(\"Nothing is currently playing.\");\n          }\n        } else {\n          setName(\"Nothing is currently playing.\");\n        }\n      }\n    };\n    handleAuthentication();\n  }, []);\n  function writeData(currentPlayingSong) {\n    const position = navigator.geolocation.getCurrentPosition(position => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n    console.log(email);\n    const db = getDatabase();\n    set(ref(db, \"users/\" + uid), {\n      userName: email,\n      currentSong: currentPlayingSong,\n      latitude: latitude,\n      longitude: longitude\n    });\n  }\n  const getUsers = async () => {\n    const db = getDatabase();\n    try {\n      const usersRef = ref(db, 'users');\n      const dataSnapshot = await get(usersRef);\n      if (dataSnapshot.exists()) {\n        const users = dataSnapshot.val();\n        console.log(users);\n      } else {\n        console.log('No users found');\n      }\n    } catch (error) {\n      console.log('Error getting users:', error);\n    }\n  };\n  const params = new URLSearchParams(window.location.search);\n  const code = params.get('code');\n  const refresh = async () => {\n    if (currentAccessToken === \"\") {\n      await getAccessToken(clientID, code);\n    }\n    const profile = await fetchProfile();\n    if (profile !== null) {\n      if (profile.is_playing === true) {\n        setName(profile.item.name);\n        writeData(profile.item.name);\n        getUsers();\n      } else {\n        setName(\"Nothing is currently playing.\");\n      }\n    } else {\n      setName(\"Nothing is currently playing.\");\n    }\n  };\n  async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n    localStorage.setItem(\"verifier\", verifier);\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", redirectURL);\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  }\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  async function generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest))).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\n    params.append(\"code_verifier\", verifier);\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: params\n    });\n    console.log(result.json);\n    const {\n      access_token\n    } = await result.json();\n    console.log(\"access token\" + access_token);\n    if (access_token !== undefined) {\n      console.log(\"acess_token\" + access_token);\n      setToken(access_token);\n      localStorage.setItem(\"accessToken\", access_token);\n    }\n    return access_token;\n  }\n  async function fetchProfile() {\n    const token = localStorage.getItem(\"accessToken\");\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(result);\n    if (result.status === 204) {\n      return null;\n    }\n    return await result.json();\n  }\n  refresh();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => refresh(),\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(MainComponent, \"lkN0srsABCmi6S7nuoSt9TD99D8=\");\n_c = MainComponent;\nexport default MainComponent;\nvar _c;\n$RefreshReg$(_c, \"MainComponent\");","map":{"version":3,"names":["React","useEffect","useState","firebase","EmailAuthCredential","getAuth","onAuthStateChanged","getDatabase","ref","set","get","onValue","app","jsxDEV","_jsxDEV","clientID","redirectURL","MainComponent","_s","name","setName","currentAccessToken","setToken","uid","setUid","email","setEmail","latitude","setLatitude","longitude","setLongitude","auth","user","currentEmail","console","log","params","URLSearchParams","window","location","search","code","handleAuthentication","redirectToAuthCodeFlow","getAccessToken","profile","fetchProfile","is_playing","item","writeData","getUsers","currentPlayingSong","position","navigator","geolocation","getCurrentPosition","coords","db","userName","currentSong","usersRef","dataSnapshot","exists","users","val","error","refresh","clientId","verifier","generateCodeVerifier","challenge","generateCodeChallenge","localStorage","setItem","append","document","toString","length","text","possible","i","charAt","Math","floor","random","codeVerifier","encoder","TextEncoder","data","encode","digest","crypto","subtle","btoa","String","fromCharCode","Uint8Array","replace","getItem","result","fetch","method","headers","body","json","access_token","undefined","token","Authorization","status","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/src/SpotifyPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app'\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, get, onValue } from \"firebase/database\";\nimport { app } from './Firebase/config';\n\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\nconst redirectURL = \"http://localhost:3000/main\";\n\n\nconst MainComponent = () => {\n  const [name, setName] = useState(\"Nothing Currently Playing.\");\n  const [currentAccessToken, setToken] = useState(\"\");\n  const [uid, setUid] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  const [longitude, setLongitude] = useState(0.0);\n  \n\n  useEffect(() => {\n    const auth = getAuth();\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/auth.user\n        const uid = user.uid;\n        const currentEmail = user.email;\n        console.log(\"userEmail \" + currentEmail);\n        setEmail(currentEmail);\n        setUid(uid);\n        // ...\n      } else {\n        console.log(\"signed out\");\n        // User is signed out\n        // ...\n      }\n    });\n\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n\n    const handleAuthentication = async () => {\n      if (!code) {\n        redirectToAuthCodeFlow(clientID);\n      } else {\n        console.log(\"got here!\");\n        if(currentAccessToken === \"\") {\n          await getAccessToken(clientID, code);\n        }\n\n\n        const profile = await fetchProfile();\n        //setToken(current);\n        if(profile !== null) {\n          if (profile.is_playing === true) {\n            setName(profile.item.name);\n            writeData(profile.item.name);\n            getUsers();\n          }\n          else {\n            setName(\"Nothing is currently playing.\")\n          }\n        }\n        \n        \n        else {\n          setName(\"Nothing is currently playing.\")\n        }\n      }\n    };\n\n    handleAuthentication();\n\n    \n    \n    \n\n  }, []);\n\n  function writeData(currentPlayingSong) {\n    const position = navigator.geolocation.getCurrentPosition((position) => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n\n    });\n    \n    console.log(email);\n    const db = getDatabase();\n    set(ref(db, \"users/\" + uid), {\n        userName:email,\n        currentSong:currentPlayingSong,\n        latitude: latitude,\n        longitude: longitude\n    });\n  }\n\n  const getUsers = async () => {\n    const db = getDatabase();\n    try {\n      const usersRef = ref(db, 'users');\n      const dataSnapshot = await get(usersRef);\n  \n      if (dataSnapshot.exists()) {\n        const users = dataSnapshot.val();\n        console.log(users);\n        \n      } else {\n        console.log('No users found');\n      }\n    } catch (error) {\n      console.log('Error getting users:', error);\n    }\n  };\n\n\n  const params = new URLSearchParams(window.location.search);\n  const code = params.get('code')\n\n\n  const refresh = async () => {\n    if(currentAccessToken === \"\") {\n      await getAccessToken(clientID, code);\n    }\n    const profile = await fetchProfile();\n\n    if(profile !== null) {\n      if (profile.is_playing === true) {\n        setName(profile.item.name);\n        writeData(profile.item.name);\n        getUsers();\n      }\n      else {\n        setName(\"Nothing is currently playing.\")\n      }\n    }\n    \n    \n    else {\n      setName(\"Nothing is currently playing.\")\n    }\n\n  }\n\n  async function redirectToAuthCodeFlow(clientId) {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n\n    localStorage.setItem(\"verifier\", verifier);\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", redirectURL);\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  }\n\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n\n  async function generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n  }\n\n  async function getAccessToken(clientId, code) {\n    const verifier = localStorage.getItem(\"verifier\");\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\n    params.append(\"code_verifier\", verifier);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: params\n    });\n\n    console.log(result.json);\n    const { access_token } = await result.json();\n\n    console.log(\"access token\" + access_token);\n    if (access_token !== undefined) {\n      console.log(\"acess_token\" + access_token);\n      setToken(access_token);\n      localStorage.setItem(\"accessToken\", access_token);\n    }\n    return access_token;\n  }\n\n  async function fetchProfile() {\n    const token = localStorage.getItem(\"accessToken\");\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    console.log(result);\n    if(result.status === 204) {\n      return null;\n    }\n    return await result.json();\n  }\n\n  refresh();\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <button onClick={() => refresh()}>Refresh</button>\n    </div>\n  );\n};\n\nexport default MainComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}