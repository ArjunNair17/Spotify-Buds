{"ast":null,"code":"import { Platform as ReactNativePlatform } from 'react-native';\nimport { isDOMAvailable, canUseEventListeners, canUseViewport, isAsyncDebugging } from './environment/browser';\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging\n};\nexport default Platform;","map":{"version":3,"names":["Platform","ReactNativePlatform","isDOMAvailable","canUseEventListeners","canUseViewport","isAsyncDebugging","OS","select"],"sources":["/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/node_modules/expo-modules-core/src/Platform.ts"],"sourcesContent":["import { Platform as ReactNativePlatform, PlatformOSType } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,mBAAmB,QAAwB,cAAc;AAE9E,SACEC,cAAc,EACdC,oBAAoB,EACpBC,cAAc,EACdC,gBAAgB,QACX,uBAAuB;AAM9B,MAAML,QAAQ,GAAG;EACf;;;;EAIAM,EAAE,EAAEL,mBAAmB,CAACK,EAAE;EAC1B;;;;;;;;EAQAC,MAAM,EAAEN,mBAAmB,CAACM,MAAwB;EACpD;;;;EAIAL,cAAc;EACd;;;;;EAKAC,oBAAoB;EACpB;;;;;EAKAC,cAAc;EACd;;;;EAIAC;CACD;AAED,eAAeL,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}