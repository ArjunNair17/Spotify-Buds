{"ast":null,"code":"var _jsxFileName = \"/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js\";\n// import React from 'react';\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }  \n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n// export default App;\nimport React from 'react';\n//import { getDatabase, ref, set } from \"firebase/database\";\nimport { getDatabase, ref, set, onValue } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userDatabase = [{\n  name: \"User1\",\n  lat: 34.0726251,\n  lon: -118.4536259\n}, {\n  name: \"User2\",\n  lat: 34.0726400,\n  lon: -118.4536259\n}, {\n  name: \"User3\",\n  lat: 34.0726450,\n  lon: -118.4536259\n}, {\n  name: \"User4\",\n  lat: 34.0726351,\n  lon: -118.4536259\n}, {\n  name: \"User5\",\n  lat: 34.072540,\n  lon: -118.4536269\n}];\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n};\ninitializeApp(firebaseConfig);\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      userAddress: null,\n      closestUsers: [],\n      radius: 5 // Default radius of 5 feet\n    };\n\n    this.getLocation = this.getLocation.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getUserAddress = this.getUserAddress.bind(this);\n    this.handleRadiusChange = this.handleRadiusChange.bind(this);\n  }\n  componentDidMount() {\n    this.getLocation();\n    this.interval = setInterval(this.getLocation, 1000);\n\n    // Read user data from Firebase database\n    const db = getDatabase();\n    onValue(ref(db, 'Users/'), snapshot => {\n      const userData = snapshot.val();\n      if (userData) {\n        const userArray = Object.entries(userData).map(_ref => {\n          let [key, value] = _ref;\n          return {\n            id: key,\n            ...value\n          };\n        });\n        const {\n          latitude,\n          longitude,\n          radius\n        } = this.state;\n        const closestUsers = this.findClosestUsers(latitude, longitude, userArray, radius);\n        this.setState({\n          closestUsers: closestUsers\n        });\n      }\n    });\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  getCoordinates(position) {\n    this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }, this.getUserAddress);\n  }\n  getUserAddress() {\n    const {\n      latitude,\n      longitude,\n      radius\n    } = this.state;\n    if (latitude && longitude) {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`).then(response => response.json()).then(data => {\n        const address = data.results[0].formatted_address;\n        this.setState({\n          userAddress: address\n        });\n\n        // const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n        // this.setState({ closestUsers: closestUsers });\n        //const { closestUsers } = this.state;\n        const closestUsersFromFirebase = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n        this.setState({\n          closestUsers: closestUsersFromFirebase\n        });\n\n        // Write user data to Firebase database\n        const db = getDatabase();\n        const userId = \"user123\"; // Provide a unique user ID\n        set(ref(db, 'Users/' + userId), {\n          latitude: latitude,\n          longitude: longitude,\n          address: address\n        });\n      }).catch(error => alert(error));\n    }\n  }\n  handleLocationError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        alert(\"User denied the request for Geolocation.\");\n        break;\n      case error.POSITION_UNAVAILABLE:\n        alert(\"Location information is unavailable.\");\n        break;\n      case error.TIMEOUT:\n        alert(\"The request to get user location timed out.\");\n        break;\n      case error.UNKNOWN_ERROR:\n        alert(\"An unknown error occurred.\");\n        break;\n      default:\n        alert(\"An unknown error occurred.\");\n    }\n  }\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distanceInFeet = earthRadiusInFeet * c;\n    const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n    return roundedDistance;\n  }\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n  findClosestUsers(userLat, userLon, database, radius) {\n    const distances = [];\n    for (const person of database) {\n      const distance = this.calculateDistance(userLat, userLon, person.latitude, person.longitude);\n      if (distance <= radius) {\n        distances.push({\n          user: person.name,\n          distance: distance\n        });\n      }\n    }\n    distances.sort((a, b) => a.distance - b.distance);\n    return distances;\n  }\n  handleRadiusChange(event) {\n    const radius = parseInt(event.target.value, 10);\n    this.setState({\n      radius\n    }, this.getUserAddress);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Geolocation Finder for SpotifyBuds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"radius\",\n        children: \"Select radius in feet:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"radius\",\n        value: this.state.radius,\n        onChange: this.handleRadiusChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"5\",\n          children: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"25\",\n          children: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"50\",\n          children: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"100\",\n          children: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getLocation,\n        children: \"Get coordinates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Coordinates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latitude: \", this.state.latitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Longitude: \", this.state.longitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Finding people around your area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Address: \", this.state.userAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), this.state.latitude && this.state.longitude && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Closest Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), this.state.closestUsers.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.closestUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [user.user, \" - \", user.distance, \" feet\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","getDatabase","ref","set","onValue","initializeApp","jsxDEV","_jsxDEV","userDatabase","name","lat","lon","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","Component","constructor","props","state","latitude","longitude","userAddress","closestUsers","radius","getLocation","bind","getCoordinates","getUserAddress","handleRadiusChange","componentDidMount","interval","setInterval","db","snapshot","userData","val","userArray","Object","entries","map","_ref","key","value","id","findClosestUsers","setState","componentWillUnmount","clearInterval","navigator","geolocation","getCurrentPosition","handleLocationError","alert","position","coords","fetch","then","response","json","data","address","results","formatted_address","closestUsersFromFirebase","userId","catch","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","calculateDistance","lat1","lon1","lat2","lon2","earthRadiusInFeet","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","distanceInFeet","roundedDistance","toFixed","degrees","PI","userLat","userLon","database","distances","person","distance","push","user","sort","b","event","parseInt","target","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","onClick","src","alt","length","index"],"sources":["/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js"],"sourcesContent":["\n// import React from 'react';\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n  \n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }  \n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n// export default App;\nimport React from 'react';\n//import { getDatabase, ref, set } from \"firebase/database\";\nimport { getDatabase, ref, set, onValue } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport './App.css';\n\nconst userDatabase = [\n  { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n  { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n  { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n  { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n  { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n];\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n};\n\ninitializeApp(firebaseConfig);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      userAddress: null,\n      closestUsers: [],\n      radius: 5 // Default radius of 5 feet\n    };\n    this.getLocation = this.getLocation.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getUserAddress = this.getUserAddress.bind(this);\n    this.handleRadiusChange = this.handleRadiusChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getLocation();\n    this.interval = setInterval(this.getLocation, 1000);\n\n      // Read user data from Firebase database\n  const db = getDatabase();\n  onValue(ref(db, 'Users/'), (snapshot) => {\n    const userData = snapshot.val();\n    if (userData) {\n      const userArray = Object.entries(userData).map(([key, value]) => ({\n        id: key,\n        ...value\n      }));\n      const { latitude, longitude, radius } = this.state;\n      const closestUsers = this.findClosestUsers(\n        latitude,\n        longitude,\n        userArray,\n        radius\n      );\n      this.setState({ closestUsers: closestUsers });\n    }\n  });\n}\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  getCoordinates(position) {\n    this.setState(\n      {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      },\n      this.getUserAddress\n    );\n  }\n\n  getUserAddress() {\n    const { latitude, longitude, radius } = this.state;\n    if (latitude && longitude) {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n        .then(response => response.json())\n        .then(data => {\n          const address = data.results[0].formatted_address;\n          this.setState({ userAddress: address });\n\n          // const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n          // this.setState({ closestUsers: closestUsers });\n          //const { closestUsers } = this.state;\n          const closestUsersFromFirebase = this.findClosestUsers(\n          latitude,\n          longitude,\n          userDatabase,\n          radius\n        );\n        this.setState({ closestUsers: closestUsersFromFirebase });\n\n          // Write user data to Firebase database\n          const db = getDatabase();\n          const userId = \"user123\"; // Provide a unique user ID\n          set(ref(db, 'Users/' + userId), {\n            latitude: latitude,\n            longitude: longitude,\n            address: address\n          });\n        })\n        .catch(error => alert(error));\n    }\n  }\n\n  handleLocationError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        alert(\"User denied the request for Geolocation.\");\n        break;\n      case error.POSITION_UNAVAILABLE:\n        alert(\"Location information is unavailable.\");\n        break;\n      case error.TIMEOUT:\n        alert(\"The request to get user location timed out.\");\n        break;\n      case error.UNKNOWN_ERROR:\n        alert(\"An unknown error occurred.\");\n        break;\n      default:\n        alert(\"An unknown error occurred.\");\n    }\n  }\n\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distanceInFeet = earthRadiusInFeet * c;\n    const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n    return roundedDistance;\n  }\n\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  findClosestUsers(userLat, userLon, database, radius) {\n    const distances = [];\n\n    for (const person of database) {\n      const distance = this.calculateDistance(userLat, userLon, person.latitude, person.longitude);\n      if (distance <= radius) {\n        distances.push({ user: person.name, distance: distance });\n      }\n    }\n\n    distances.sort((a, b) => a.distance - b.distance);\n\n    return distances;\n  }\n\n  handleRadiusChange(event) {\n    const radius = parseInt(event.target.value, 10);\n    this.setState({ radius }, this.getUserAddress);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Geolocation Finder for SpotifyBuds</h2>\n        <label htmlFor=\"radius\">Select radius in feet:</label>\n        <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"25\">25</option>\n          <option value=\"50\">50</option>\n          <option value=\"100\">100</option>\n        </select>\n        <p></p><button onClick={this.getLocation}>Get coordinates</button>\n        <h4>Your Coordinates</h4>\n        <p>Latitude: {this.state.latitude}</p>\n        <p>Longitude: {this.state.longitude}</p>\n        <h4>Finding people around your area</h4>\n        <p>Address: {this.state.userAddress}</p>\n        {\n          this.state.latitude && this.state.longitude &&\n          <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n        }\n        <h4>Closest Users</h4>\n        {this.state.closestUsers.length > 0 && (\n          <ul>\n            {this.state.closestUsers.map((user, index) => (\n              <li key={index}>{user.user} - {user.distance} feet</li>\n            ))}\n          </ul>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}