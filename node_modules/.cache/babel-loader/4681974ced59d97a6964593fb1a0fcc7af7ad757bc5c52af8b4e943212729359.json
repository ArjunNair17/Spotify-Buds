{"ast":null,"code":"import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error('Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' + error.message);\n    }\n  }, []);\n  useEffect(() => {\n    if (!emitter) return;\n    function handleShowMessage(event) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web'\n      }).start(_ref => {\n        let {\n          finished\n        } = _ref;\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n    const showMessageSubscription = emitter.addListener('devLoadingView:showMessage', handleShowMessage);\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n  return React.createElement(Animated.View, {\n    style: [styles.animatedContainer, {\n      transform: [{\n        translateY\n      }]\n    }],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: styles.banner\n  }, React.createElement(View, {\n    style: styles.contentContainer\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, {\n    style: styles.text\n  }, message)), React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Text, {\n    style: styles.subtitle\n  }, isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\")))));\n}\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    // @ts-expect-error: fixed is not a valid value for position in Yoga but it is on web.\n    position: Platform.select({\n      web: 'fixed',\n      default: 'absolute'\n    }),\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42 // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center'\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)'\n  }\n});","map":{"version":3,"names":["EventEmitter","React","useEffect","useState","useRef","useMemo","Animated","StyleSheet","Text","Platform","View","DevLoadingViewNativeModule","getInitialSafeArea","DevLoadingView","message","setMessage","isDevLoading","setIsDevLoading","isAnimating","setIsAnimating","translateY","Value","current","emitter","error","Error","handleShowMessage","event","setValue","handleHide","timing","toValue","delay","duration","useNativeDriver","OS","start","_ref","finished","showMessageSubscription","addListener","hideSubscription","cleanup","remove","createElement","style","styles","animatedContainer","transform","pointerEvents","banner","contentContainer","flexDirection","text","flex","subtitle","create","position","select","web","default","bottom","left","right","zIndex","overflow","backgroundColor","paddingBottom","paddingTop","alignItems","justifyContent","textAlign","color","fontSize"],"sources":["/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/node_modules/expo/src/environment/DevLoadingView.tsx"],"sourcesContent":["import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\n\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\n\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo<EventEmitter>(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error(\n        'Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' +\n          error.message\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) return;\n\n    function handleShowMessage(event: { message: string }) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    const showMessageSubscription = emitter.addListener(\n      'devLoadingView:showMessage',\n      handleShowMessage\n    );\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n      pointerEvents=\"none\">\n      <View style={styles.banner}>\n        <View style={styles.contentContainer}>\n          <View style={{ flexDirection: 'row' }}>\n            <Text style={styles.text}>{message}</Text>\n          </View>\n\n          <View style={{ flex: 1 }}>\n            <Text style={styles.subtitle}>\n              {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    // @ts-expect-error: fixed is not a valid value for position in Yoga but it is on web.\n    position: Platform.select({\n      web: 'fixed',\n      default: 'absolute',\n    }),\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom,\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}