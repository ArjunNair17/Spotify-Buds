{"ast":null,"code":"import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport DevLoadingView from '../environment/DevLoadingView';\n/**\n * Append the Expo Fast Refresh view and optionally\n * keep the screen awake if `expo-keep-awake` is installed.\n */\nexport function withDevTools(AppRootComponent) {\n  // This hook can be optionally imported because __DEV__ never changes during runtime.\n  // Using __DEV__ like this enables tree shaking to remove the hook in production.\n  const useOptionalKeepAwake = (() => {\n    if (Platform.OS !== 'web') {\n      try {\n        // Optionally import expo-keep-awake\n        const {\n          useKeepAwake,\n          ExpoKeepAwakeTag\n        } = require('expo-keep-awake');\n        return () => useKeepAwake(ExpoKeepAwakeTag, {\n          suppressDeactivateWarnings: true\n        });\n      } catch {}\n    }\n    return () => {};\n  })();\n  const shouldUseExpoFastRefreshView = Platform.select({\n    web: true,\n    ios: Constants.executionEnvironment !== ExecutionEnvironment.Bare,\n    default: false\n  });\n  function WithDevTools(props) {\n    useOptionalKeepAwake();\n    if (shouldUseExpoFastRefreshView) {\n      return React.createElement(React.Fragment, null, React.createElement(AppRootComponent, {\n        ...props\n      }), React.createElement(DevLoadingView, null));\n    }\n    return React.createElement(AppRootComponent, {\n      ...props\n    });\n  }\n  const name = AppRootComponent.displayName || AppRootComponent.name || 'Anonymous';\n  WithDevTools.displayName = `withDevTools(${name})`;\n  return WithDevTools;\n}","map":{"version":3,"names":["Constants","ExecutionEnvironment","React","Platform","DevLoadingView","withDevTools","AppRootComponent","useOptionalKeepAwake","OS","useKeepAwake","ExpoKeepAwakeTag","require","suppressDeactivateWarnings","shouldUseExpoFastRefreshView","select","web","ios","executionEnvironment","Bare","default","WithDevTools","props","createElement","Fragment","name","displayName"],"sources":["/Users/arjunsnair/Documents/GitHub/SpotifyAppCS35L/node_modules/expo/src/launch/withDevTools.tsx"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\n\nimport DevLoadingView from '../environment/DevLoadingView';\n\n/**\n * Append the Expo Fast Refresh view and optionally\n * keep the screen awake if `expo-keep-awake` is installed.\n */\nexport function withDevTools<TComponent extends React.ComponentType<any>>(\n  AppRootComponent: TComponent\n): React.ComponentType<React.ComponentProps<TComponent>> {\n  // This hook can be optionally imported because __DEV__ never changes during runtime.\n  // Using __DEV__ like this enables tree shaking to remove the hook in production.\n  const useOptionalKeepAwake: (tag?: string) => void = (() => {\n    if (Platform.OS !== 'web') {\n      try {\n        // Optionally import expo-keep-awake\n        const { useKeepAwake, ExpoKeepAwakeTag } = require('expo-keep-awake');\n        return () => useKeepAwake(ExpoKeepAwakeTag, { suppressDeactivateWarnings: true });\n      } catch {}\n    }\n\n    return () => {};\n  })();\n\n  const shouldUseExpoFastRefreshView = Platform.select({\n    web: true,\n    ios: Constants.executionEnvironment !== ExecutionEnvironment.Bare,\n    default: false,\n  });\n\n  function WithDevTools(props: React.ComponentProps<TComponent>) {\n    useOptionalKeepAwake();\n\n    if (shouldUseExpoFastRefreshView) {\n      return (\n        <>\n          <AppRootComponent {...props} />\n          <DevLoadingView />\n        </>\n      );\n    }\n\n    return <AppRootComponent {...props} />;\n  }\n\n  const name = AppRootComponent.displayName || AppRootComponent.name || 'Anonymous';\n  WithDevTools.displayName = `withDevTools(${name})`;\n\n  return WithDevTools;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,IAAIC,oBAAoB,QAAQ,gBAAgB;AAChE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,cAAc;AAEvC,OAAOC,cAAc,MAAM,+BAA+B;AAE1D;;;;AAIA,OAAM,SAAUC,YAAYA,CAC1BC,gBAA4B;EAE5B;EACA;EACA,MAAMC,oBAAoB,GAA2B,CAAC,MAAK;IACzD,IAAIJ,QAAQ,CAACK,EAAE,KAAK,KAAK,EAAE;MACzB,IAAI;QACF;QACA,MAAM;UAAEC,YAAY;UAAEC;QAAgB,CAAE,GAAGC,OAAO,CAAC,iBAAiB,CAAC;QACrE,OAAO,MAAMF,YAAY,CAACC,gBAAgB,EAAE;UAAEE,0BAA0B,EAAE;QAAI,CAAE,CAAC;OAClF,CAAC,MAAM;;IAGV,OAAO,MAAK,CAAE,CAAC;EACjB,CAAC,EAAC,CAAE;EAEJ,MAAMC,4BAA4B,GAAGV,QAAQ,CAACW,MAAM,CAAC;IACnDC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAEhB,SAAS,CAACiB,oBAAoB,KAAKhB,oBAAoB,CAACiB,IAAI;IACjEC,OAAO,EAAE;GACV,CAAC;EAEF,SAASC,YAAYA,CAACC,KAAuC;IAC3Dd,oBAAoB,EAAE;IAEtB,IAAIM,4BAA4B,EAAE;MAChC,OACEX,KAAA,CAAAoB,aAAA,CAAApB,KAAA,CAAAqB,QAAA,QACErB,KAAA,CAAAoB,aAAA,CAAChB,gBAAgB;QAAA,GAAKe;MAAK,EAAI,EAC/BnB,KAAA,CAAAoB,aAAA,CAAClB,cAAc,OAAG,CACjB;;IAIP,OAAOF,KAAA,CAAAoB,aAAA,CAAChB,gBAAgB;MAAA,GAAKe;IAAK,EAAI;EACxC;EAEA,MAAMG,IAAI,GAAGlB,gBAAgB,CAACmB,WAAW,IAAInB,gBAAgB,CAACkB,IAAI,IAAI,WAAW;EACjFJ,YAAY,CAACK,WAAW,GAAG,gBAAgBD,IAAI,GAAG;EAElD,OAAOJ,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}