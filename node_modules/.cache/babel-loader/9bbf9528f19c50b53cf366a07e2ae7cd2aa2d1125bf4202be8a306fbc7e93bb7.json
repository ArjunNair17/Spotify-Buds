{"ast":null,"code":"var _jsxFileName = \"/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js\";\n// import React from 'react';\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }  \n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n// export default App;\n\n// import React from 'react';\n// //import { getDatabase, ref, set } from \"firebase/database\";\n// import { getDatabase, ref, set, onValue } from \"firebase/database\";\n// import { initializeApp } from \"firebase/app\";\n// import './App.css';\n\n// // const userDatabase = [\n// //   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n// //   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n// //   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n// //   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n// //   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// // ];\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n//   authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n//   databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n//   projectId: \"spotifybuds-e7e29\",\n//   storageBucket: \"spotifybuds-e7e29.appspot.com\",\n//   messagingSenderId: \"566960468786\",\n//   appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n//   measurementId: \"G-N3X3577Z70\"\n// };\n\n// initializeApp(firebaseConfig);\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5, // Default radius of 5 feet\n//       userDatabase: null\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//     this.updateUserDatabase = this.updateUserDatabase.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n\n//     // Listen for user data changes in Firebase database\n//     const db = getDatabase();\n//     onValue(ref(db, 'Users'), (snapshot) => {\n//       const userData = snapshot.val();\n//       if (userData) {\n//         // Convert Firebase object to an array of user objects\n//         const userDatabase = Object.keys(userData).map((userId) => ({\n//           userId,\n//           ...userData[userId]\n//         }));\n//         this.setState({ userDatabase });\n//       }\n//     });\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   updateUserDatabase(userId, userData) {\n//     this.setState((prevState) => {\n//       // Create a new array by combining existing userDatabase with the new userData\n//       const updatedUserDatabase = [...prevState.userDatabase, { userId, ...userData }];\n//       return { userDatabase: updatedUserDatabase };\n//     });\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, this.state.userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n\n//           // Write user data to Firebase database\n//           const db = getDatabase();\n//           const userId = \"user123\"; // Provide a unique user ID\n//           set(ref(db, 'Users/' + userId), {\n//             latitude: latitude,\n//             longitude: longitude,\n//             address: address\n//           });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }\n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     if (Array.isArray(database)) {\n//       for (const person of database) {\n//         const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//         if (distance <= radius) {\n//           distances.push({ user: person.name, distance: distance });\n//         }\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n\n// export default App;\nimport React, { Component } from \"react\";\nimport { getDatabase, ref, onValue } from \"firebase/database\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchUserData = () => {\n      const db = getDatabase();\n      const usersRef = ref(db, \"Users\");\n      onValue(usersRef, snapshot => {\n        const userData = snapshot.val();\n        if (userData) {\n          // Convert Firebase object to an array of user objects\n          const userArray = Object.keys(userData).map(userId => ({\n            userId,\n            ...userData[userId]\n          }));\n\n          // Update state with the user data array\n          this.setState({\n            userArray\n          });\n        }\n      });\n    };\n    this.state = {\n      userArray: []\n    };\n  }\n  componentDidMount() {\n    this.fetchUserData();\n  }\n  render() {\n    const {\n      userArray\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: userArray.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"User ID: \", user.userId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", user.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this)]\n      }, user.userId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default UserList;","map":{"version":3,"names":["React","Component","getDatabase","ref","onValue","jsxDEV","_jsxDEV","UserList","constructor","props","fetchUserData","db","usersRef","snapshot","userData","val","userArray","Object","keys","map","userId","setState","state","componentDidMount","render","children","user","fileName","_jsxFileName","lineNumber","columnNumber","name"],"sources":["/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js"],"sourcesContent":["\n// import React from 'react';\n// import './App.css';\n\n// const userDatabase = [\n//   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n//   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n//   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n//   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n//   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// ];\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5 // Default radius of 5 feet\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n  \n//           const closestUsers = this.findClosestUsers(latitude, longitude, userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }  \n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n\n//     for (const person of database) {\n//       const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//       if (distance <= radius) {\n//         distances.push({ user: person.name, distance: distance });\n//       }\n//     }\n\n//     distances.sort((a, b) => a.distance - b.distance);\n\n//     return distances;\n//   }\n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n// export default App;\n\n\n// import React from 'react';\n// //import { getDatabase, ref, set } from \"firebase/database\";\n// import { getDatabase, ref, set, onValue } from \"firebase/database\";\n// import { initializeApp } from \"firebase/app\";\n// import './App.css';\n\n// // const userDatabase = [\n// //   { name: \"User1\", lat: 34.0726251, lon: -118.4536259 },\n// //   { name: \"User2\", lat: 34.0726400, lon: -118.4536259 },\n// //   { name: \"User3\", lat: 34.0726450, lon: -118.4536259 },\n// //   { name: \"User4\", lat: 34.0726351, lon: -118.4536259 },\n// //   { name: \"User5\", lat: 34.072540, lon: -118.4536269 }\n// // ];\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n//   authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n//   databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n//   projectId: \"spotifybuds-e7e29\",\n//   storageBucket: \"spotifybuds-e7e29.appspot.com\",\n//   messagingSenderId: \"566960468786\",\n//   appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n//   measurementId: \"G-N3X3577Z70\"\n// };\n\n// initializeApp(firebaseConfig);\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       latitude: null,\n//       longitude: null,\n//       userAddress: null,\n//       closestUsers: [],\n//       radius: 5, // Default radius of 5 feet\n//       userDatabase: null\n//     };\n//     this.getLocation = this.getLocation.bind(this);\n//     this.getCoordinates = this.getCoordinates.bind(this);\n//     this.getUserAddress = this.getUserAddress.bind(this);\n//     this.handleRadiusChange = this.handleRadiusChange.bind(this);\n//     this.updateUserDatabase = this.updateUserDatabase.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.getLocation();\n//     this.interval = setInterval(this.getLocation, 1000);\n\n//     // Listen for user data changes in Firebase database\n//     const db = getDatabase();\n//     onValue(ref(db, 'Users'), (snapshot) => {\n//       const userData = snapshot.val();\n//       if (userData) {\n//         // Convert Firebase object to an array of user objects\n//         const userDatabase = Object.keys(userData).map((userId) => ({\n//           userId,\n//           ...userData[userId]\n//         }));\n//         this.setState({ userDatabase });\n//       }\n//     });\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   updateUserDatabase(userId, userData) {\n//     this.setState((prevState) => {\n//       // Create a new array by combining existing userDatabase with the new userData\n//       const updatedUserDatabase = [...prevState.userDatabase, { userId, ...userData }];\n//       return { userDatabase: updatedUserDatabase };\n//     });\n//   }\n\n//   getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n\n//   getCoordinates(position) {\n//     this.setState(\n//       {\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//       },\n//       this.getUserAddress\n//     );\n//   }\n\n//   getUserAddress() {\n//     const { latitude, longitude, radius } = this.state;\n//     if (latitude && longitude) {\n//       fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`)\n//         .then(response => response.json())\n//         .then(data => {\n//           const address = data.results[0].formatted_address;\n//           this.setState({ userAddress: address });\n\n//           const closestUsers = this.findClosestUsers(latitude, longitude, this.state.userDatabase, radius);\n//           this.setState({ closestUsers: closestUsers });\n\n//           // Write user data to Firebase database\n//           const db = getDatabase();\n//           const userId = \"user123\"; // Provide a unique user ID\n//           set(ref(db, 'Users/' + userId), {\n//             latitude: latitude,\n//             longitude: longitude,\n//             address: address\n//           });\n//         })\n//         .catch(error => alert(error));\n//     }\n//   }\n\n//   handleLocationError(error) {\n//     switch (error.code) {\n//       case error.PERMISSION_DENIED:\n//         alert(\"User denied the request for Geolocation.\");\n//         break;\n//       case error.POSITION_UNAVAILABLE:\n//         alert(\"Location information is unavailable.\");\n//         break;\n//       case error.TIMEOUT:\n//         alert(\"The request to get user location timed out.\");\n//         break;\n//       case error.UNKNOWN_ERROR:\n//         alert(\"An unknown error occurred.\");\n//         break;\n//       default:\n//         alert(\"An unknown error occurred.\");\n//     }\n//   }\n\n//   calculateDistance(lat1, lon1, lat2, lon2) {\n//     const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\n//     const dLat = this.toRadians(lat2 - lat1);\n//     const dLon = this.toRadians(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n//       Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distanceInFeet = earthRadiusInFeet * c;\n//     const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\n//     return roundedDistance;\n//   }\n\n//   toRadians(degrees) {\n//     return degrees * (Math.PI / 180);\n//   }\n\n//   findClosestUsers(userLat, userLon, database, radius) {\n//     const distances = [];\n  \n//     if (Array.isArray(database)) {\n//       for (const person of database) {\n//         const distance = this.calculateDistance(userLat, userLon, person.lat, person.lon);\n//         if (distance <= radius) {\n//           distances.push({ user: person.name, distance: distance });\n//         }\n//       }\n//     }\n  \n//     distances.sort((a, b) => a.distance - b.distance);\n  \n//     return distances;\n//   }\n  \n\n//   handleRadiusChange(event) {\n//     const radius = parseInt(event.target.value, 10);\n//     this.setState({ radius }, this.getUserAddress);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Geolocation Finder for SpotifyBuds</h2>\n//         <label htmlFor=\"radius\">Select radius in feet:</label>\n//         <select id=\"radius\" value={this.state.radius} onChange={this.handleRadiusChange}>\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"25\">25</option>\n//           <option value=\"50\">50</option>\n//           <option value=\"100\">100</option>\n//         </select>\n//         <p></p><button onClick={this.getLocation}>Get coordinates</button>\n//         <h4>Your Coordinates</h4>\n//         <p>Latitude: {this.state.latitude}</p>\n//         <p>Longitude: {this.state.longitude}</p>\n//         <h4>Finding people around your area</h4>\n//         <p>Address: {this.state.userAddress}</p>\n//         {\n//           this.state.latitude && this.state.longitude &&\n//           <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`} alt=''/>\n//         }\n//         <h4>Closest Users</h4>\n//         {this.state.closestUsers.length > 0 && (\n//           <ul>\n//             {this.state.closestUsers.map((user, index) => (\n//               <li key={index}>{user.user} - {user.distance} feet</li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     )\n//   }\n// }\n\n// export default App;\nimport React, { Component } from \"react\";\nimport { getDatabase, ref, onValue } from \"firebase/database\";\n\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userArray: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUserData();\n  }\n\n  fetchUserData = () => {\n    const db = getDatabase();\n    const usersRef = ref(db, \"Users\");\n\n    onValue(usersRef, (snapshot) => {\n      const userData = snapshot.val();\n      if (userData) {\n        // Convert Firebase object to an array of user objects\n        const userArray = Object.keys(userData).map((userId) => ({\n          userId,\n          ...userData[userId]\n        }));\n\n        // Update state with the user data array\n        this.setState({ userArray });\n      }\n    });\n  };\n\n  render() {\n    const { userArray } = this.state;\n\n    return (\n      <div>\n        {userArray.map((user) => (\n          <div key={user.userId}>\n            <h3>User ID: {user.userId}</h3>\n            <p>Name: {user.name}</p>\n            {/* Other user data */}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n"],"mappingsxC,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,QAAQ,SAASN,SAAS,CAAC;EAC/BO,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAUfC,aAAa,GAAG,MAAM;MACpB,MAAMC,EAAE,GAAGT,WAAW,CAAC,CAAC;MACxB,MAAMU,QAAQ,GAAGT,GAAG,CAACQ,EAAE,EAAE,OAAO,CAAC;MAEjCP,OAAO,CAACQ,QAAQ,EAAGC,QAAQ,IAAK;QAC9B,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;QAC/B,IAAID,QAAQ,EAAE;UACZ;UACA,MAAME,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,GAAG,CAAEC,MAAM,KAAM;YACvDA,MAAM;YACN,GAAGN,QAAQ,CAACM,MAAM;UACpB,CAAC,CAAC,CAAC;;UAEH;UACA,IAAI,CAACC,QAAQ,CAAC;YAAEL;UAAU,CAAC,CAAC;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC;IA1BC,IAAI,CAACM,KAAK,GAAG;MACXN,SAAS,EAAE;IACb,CAAC;EACH;EAEAO,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACb,aAAa,CAAC,CAAC;EACtB;EAqBAc,MAAMA,CAAA,EAAG;IACP,MAAM;MAAER;IAAU,CAAC,GAAG,IAAI,CAACM,KAAK;IAEhC,oBACEhB,OAAA;MAAAmB,QAAA,EACGT,SAAS,CAACG,GAAG,CAAEO,IAAI,iBAClBpB,OAAA;QAAAmB,QAAA,gBACEnB,OAAA;UAAAmB,QAAA,GAAI,WAAS,EAACC,IAAI,CAACN,MAAM;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC/BxB,OAAA;UAAAmB,QAAA,GAAG,QAAM,EAACC,IAAI,CAACK,IAAI;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFhBJ,IAAI,CAACN,MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIhB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;AAEA,eAAevB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}