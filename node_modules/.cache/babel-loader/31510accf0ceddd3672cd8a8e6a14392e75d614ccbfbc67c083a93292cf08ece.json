{"ast":null,"code":"var _jsxFileName = \"/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { getDatabase, ref, onValue } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n};\ninitializeApp(firebaseConfig);\nconst App = () => {\n  _s();\n  useEffect(() => {\n    fetchUserData();\n    const interval = setInterval(getLocation, 1000); // Update every 30 seconds\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n  const fetchUserData = () => {\n    const db = getDatabase();\n    const usersRef = ref(db, \"Users\");\n    onValue(usersRef, snapshot => {\n      const userData = snapshot.val();\n      if (userData) {\n        const markers = Object.values(userData).map(user => {\n          const {\n            latitude,\n            longitude\n          } = user;\n          return [`${user.userId}'s Location`, latitude, longitude];\n        });\n        initMap(markers);\n      }\n    });\n  };\n  const getLocation = () => {\n    fetchUserData();\n  };\n  const initMap = markers => {\n    const loadMap = () => {\n      const mapOptions = {\n        center: {\n          lat: markers[0][1],\n          lng: markers[0][2]\n        },\n        zoom: 13,\n        mapTypeId: 'roadmap'\n      };\n      const map = new window.google.maps.Map(document.getElementById(\"mapCanvas\"), mapOptions);\n      const bounds = new window.google.maps.LatLngBounds();\n      const infoWindow = new window.google.maps.InfoWindow();\n      markers.forEach(markerData => {\n        const [title, lat, lng] = markerData;\n        console.log(\"Title:\", title);\n        const position = new window.google.maps.LatLng(lat, lng);\n        bounds.extend(position);\n        const marker = new window.google.maps.Marker({\n          position: position,\n          map: map,\n          title: title\n        });\n        console.log(\"Title:\", title);\n        window.google.maps.event.addListener(marker, 'click', () => {\n          infoWindow.setContent(`<div class=\"info_content\">\n            <h2>${title}</h2>\n            <h3>Latitude: ${lat}, Longitude: ${lng}</h3>\n            <p>Additional information about the user or location.</p>\n          </div>`);\n          infoWindow.open(map, marker);\n        });\n      });\n      map.fitBounds(bounds);\n      map.setZoom(14);\n    };\n    const getLocation = () => {\n      fetchUserData();\n    };\n    if (window.google && window.google.maps) {\n      // Google Maps API is already loaded\n      loadMap();\n    } else {\n      // Load the Google Maps API script\n      const googleMapsScript = document.createElement('script');\n      googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`;\n      googleMapsScript.defer = true;\n      googleMapsScript.onload = loadMap;\n      document.head.appendChild(googleMapsScript);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Geolocation Finder for SpotifyBuds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapCanvas\",\n      style: {\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","getDatabase","ref","onValue","initializeApp","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","_s","fetchUserData","interval","setInterval","getLocation","clearInterval","db","usersRef","snapshot","userData","val","markers","Object","values","map","user","latitude","longitude","userId","initMap","loadMap","mapOptions","center","lat","lng","zoom","mapTypeId","window","google","maps","Map","document","getElementById","bounds","LatLngBounds","infoWindow","InfoWindow","forEach","markerData","title","console","log","position","LatLng","extend","marker","Marker","event","addListener","setContent","open","fitBounds","setZoom","googleMapsScript","createElement","src","defer","onload","head","appendChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","_c","$RefreshReg$"],"sources":["/Users/aahilali/Documents/GitHub/SpotifyAppCS35L/src/App.js"],"sourcesContent":["\nimport React, { useEffect } from 'react';\nimport { getDatabase, ref, onValue } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\n  projectId: \"spotifybuds-e7e29\",\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\n  messagingSenderId: \"566960468786\",\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\n  measurementId: \"G-N3X3577Z70\"\n }; \n\ninitializeApp(firebaseConfig);\n\nconst App = () => {\n  useEffect(() => {\n    fetchUserData();\n    const interval = setInterval(getLocation, 1000); // Update every 30 seconds\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n\n  const fetchUserData = () => {\n    const db = getDatabase();\n    const usersRef = ref(db, \"Users\");\n\n    onValue(usersRef, (snapshot) => {\n      const userData = snapshot.val();\n      if (userData) {\n        const markers = Object.values(userData).map((user) => {\n          const { latitude, longitude } = user;\n          return [`${user.userId}'s Location`, latitude, longitude];\n        });\n\n        initMap(markers);\n      }\n    });\n  };\n\n  const getLocation = () => {\n    fetchUserData();\n  };\n\n  const initMap = (markers) => {\n    const loadMap = () => {\n      const mapOptions = {\n        center: { lat: markers[0][1], lng: markers[0][2] },\n        zoom: 13,\n        mapTypeId: 'roadmap'\n      };\n\n      const map = new window.google.maps.Map(document.getElementById(\"mapCanvas\"), mapOptions);\n\n      const bounds = new window.google.maps.LatLngBounds();\n\n      const infoWindow = new window.google.maps.InfoWindow();\n\n      markers.forEach((markerData) => {\n        const [title, lat, lng] = markerData;\n        console.log(\"Title:\", title);\n        const position = new window.google.maps.LatLng(lat, lng);\n\n        bounds.extend(position);\n\n        const marker = new window.google.maps.Marker({\n          position: position,\n          map: map,\n          title: title\n        });\n        console.log(\"Title:\", title);\n\n        window.google.maps.event.addListener(marker, 'click', () => {\n          infoWindow.setContent(`<div class=\"info_content\">\n            <h2>${title}</h2>\n            <h3>Latitude: ${lat}, Longitude: ${lng}</h3>\n            <p>Additional information about the user or location.</p>\n          </div>`);\n          infoWindow.open(map, marker);\n        });\n      });\n\n      map.fitBounds(bounds);\n      map.setZoom(14);\n    };\n\n    const getLocation = () => {\n      fetchUserData();\n    };\n\n    if (window.google && window.google.maps) {\n      // Google Maps API is already loaded\n      loadMap();\n    } else {\n      // Load the Google Maps API script\n      const googleMapsScript = document.createElement('script');\n      googleMapsScript.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBxDQfDy1nwLkmwaJUfQtNNqXla3kZr-ug`;\n      googleMapsScript.defer = true;\n      googleMapsScript.onload = loadMap;\n      document.head.appendChild(googleMapsScript);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Geolocation Finder for SpotifyBuds</h2>\n      <div id=\"mapCanvas\" style={{ height: \"400px\" }}></div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,QAAQ,mBAAmB;AAC7D,SAASC,aAAa,QAAQ,cAAc;AAC5C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,mCAAmC;EAC/CC,WAAW,EAAE,uDAAuD;EACpEC,SAAS,EAAE,mBAAmB;EAC9BC,aAAa,EAAE,+BAA+B;EAC9CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AAChB,CAAC;AAEFX,aAAa,CAACG,cAAc,CAAC;AAE7B,MAAMS,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBjB,SAAS,CAAC,MAAM;IACdkB,aAAa,CAAC,CAAC;IACf,MAAMC,QAAQ,GAAGC,WAAW,CAACC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;IACjD,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMK,EAAE,GAAGtB,WAAW,CAAC,CAAC;IACxB,MAAMuB,QAAQ,GAAGtB,GAAG,CAACqB,EAAE,EAAE,OAAO,CAAC;IAEjCpB,OAAO,CAACqB,QAAQ,EAAGC,QAAQ,IAAK;MAC9B,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;MAC/B,IAAID,QAAQ,EAAE;QACZ,MAAME,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACJ,QAAQ,CAAC,CAACK,GAAG,CAAEC,IAAI,IAAK;UACpD,MAAM;YAAEC,QAAQ;YAAEC;UAAU,CAAC,GAAGF,IAAI;UACpC,OAAO,CAAE,GAAEA,IAAI,CAACG,MAAO,aAAY,EAAEF,QAAQ,EAAEC,SAAS,CAAC;QAC3D,CAAC,CAAC;QAEFE,OAAO,CAACR,OAAO,CAAC;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMP,WAAW,GAAGA,CAAA,KAAM;IACxBH,aAAa,CAAC,CAAC;EACjB,CAAC;EAED,MAAMkB,OAAO,GAAIR,OAAO,IAAK;IAC3B,MAAMS,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,UAAU,GAAG;QACjBC,MAAM,EAAE;UAAEC,GAAG,EAAEZ,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAAEa,GAAG,EAAEb,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAAE,CAAC;QAClDc,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE;MACb,CAAC;MAED,MAAMZ,GAAG,GAAG,IAAIa,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,EAAEX,UAAU,CAAC;MAExF,MAAMY,MAAM,GAAG,IAAIN,MAAM,CAACC,MAAM,CAACC,IAAI,CAACK,YAAY,CAAC,CAAC;MAEpD,MAAMC,UAAU,GAAG,IAAIR,MAAM,CAACC,MAAM,CAACC,IAAI,CAACO,UAAU,CAAC,CAAC;MAEtDzB,OAAO,CAAC0B,OAAO,CAAEC,UAAU,IAAK;QAC9B,MAAM,CAACC,KAAK,EAAEhB,GAAG,EAAEC,GAAG,CAAC,GAAGc,UAAU;QACpCE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;QAC5B,MAAMG,QAAQ,GAAG,IAAIf,MAAM,CAACC,MAAM,CAACC,IAAI,CAACc,MAAM,CAACpB,GAAG,EAAEC,GAAG,CAAC;QAExDS,MAAM,CAACW,MAAM,CAACF,QAAQ,CAAC;QAEvB,MAAMG,MAAM,GAAG,IAAIlB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACiB,MAAM,CAAC;UAC3CJ,QAAQ,EAAEA,QAAQ;UAClB5B,GAAG,EAAEA,GAAG;UACRyB,KAAK,EAAEA;QACT,CAAC,CAAC;QACFC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;QAE5BZ,MAAM,CAACC,MAAM,CAACC,IAAI,CAACkB,KAAK,CAACC,WAAW,CAACH,MAAM,EAAE,OAAO,EAAE,MAAM;UAC1DV,UAAU,CAACc,UAAU,CAAE;AACjC,kBAAkBV,KAAM;AACxB,4BAA4BhB,GAAI,gBAAeC,GAAI;AACnD;AACA,iBAAiB,CAAC;UACRW,UAAU,CAACe,IAAI,CAACpC,GAAG,EAAE+B,MAAM,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF/B,GAAG,CAACqC,SAAS,CAAClB,MAAM,CAAC;MACrBnB,GAAG,CAACsC,OAAO,CAAC,EAAE,CAAC;IACjB,CAAC;IAED,MAAMhD,WAAW,GAAGA,CAAA,KAAM;MACxBH,aAAa,CAAC,CAAC;IACjB,CAAC;IAED,IAAI0B,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,IAAI,EAAE;MACvC;MACAT,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACL;MACA,MAAMiC,gBAAgB,GAAGtB,QAAQ,CAACuB,aAAa,CAAC,QAAQ,CAAC;MACzDD,gBAAgB,CAACE,GAAG,GAAI,qFAAoF;MAC5GF,gBAAgB,CAACG,KAAK,GAAG,IAAI;MAC7BH,gBAAgB,CAACI,MAAM,GAAGrC,OAAO;MACjCW,QAAQ,CAAC2B,IAAI,CAACC,WAAW,CAACN,gBAAgB,CAAC;IAC7C;EACF,CAAC;EAED,oBACEhE,OAAA;IAAKuE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBxE,OAAA;MAAAwE,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3C5E,OAAA;MAAK6E,EAAE,EAAC,WAAW;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACjE,EAAA,CA7FID,GAAG;AAAAsE,EAAA,GAAHtE,GAAG;AA+FT,eAAeA,GAAG;AAAC,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}